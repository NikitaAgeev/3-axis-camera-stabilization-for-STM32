ARM GAS  /tmp/ccr1UdHJ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"oled_driver.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.oled_cmd_send,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  23              	oled_cmd_send:
  24              	.LVL0:
  25              	.LFB341:
  26              		.file 1 "Drivers/Oled/Src/oled_driver.c"
   1:Drivers/Oled/Src/oled_driver.c **** #include "stm32f0xx_ll_bus.h"
   2:Drivers/Oled/Src/oled_driver.c **** #include "stm32f0xx_ll_gpio.h"
   3:Drivers/Oled/Src/oled_driver.c **** #include "stm32f0xx_ll_rcc.h"
   4:Drivers/Oled/Src/oled_driver.c **** #include "stm32f0xx_ll_system.h"
   5:Drivers/Oled/Src/oled_driver.c **** #include "stm32f0xx_ll_i2c.h"
   6:Drivers/Oled/Src/oled_driver.c **** 
   7:Drivers/Oled/Src/oled_driver.c **** #include "oled_driver.h"
   8:Drivers/Oled/Src/oled_driver.c **** #include <string.h>
   9:Drivers/Oled/Src/oled_driver.c **** 
  10:Drivers/Oled/Src/oled_driver.c **** static uint8_t gmem[GMEM_SIZE] = {0};
  11:Drivers/Oled/Src/oled_driver.c **** static uint8_t curX = 0;
  12:Drivers/Oled/Src/oled_driver.c **** static uint8_t curY = 0;
  13:Drivers/Oled/Src/oled_driver.c **** 
  14:Drivers/Oled/Src/oled_driver.c **** extern font_desc_t font_desc;
  15:Drivers/Oled/Src/oled_driver.c **** 
  16:Drivers/Oled/Src/oled_driver.c **** static void oled_hw_config(void)
  17:Drivers/Oled/Src/oled_driver.c **** {
  18:Drivers/Oled/Src/oled_driver.c ****     /*
  19:Drivers/Oled/Src/oled_driver.c ****      * Clock on the I2C port and configure it
  20:Drivers/Oled/Src/oled_driver.c ****      */
  21:Drivers/Oled/Src/oled_driver.c ****     // SCL - GPIOB6
  22:Drivers/Oled/Src/oled_driver.c ****     LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
  23:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6,
  24:Drivers/Oled/Src/oled_driver.c ****                        LL_GPIO_MODE_ALTERNATE);
  25:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6,
  26:Drivers/Oled/Src/oled_driver.c ****                              LL_GPIO_OUTPUT_OPENDRAIN);
  27:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_1);
  28:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6,
  29:Drivers/Oled/Src/oled_driver.c ****                         LL_GPIO_SPEED_FREQ_HIGH);
  30:Drivers/Oled/Src/oled_driver.c **** 
  31:Drivers/Oled/Src/oled_driver.c ****     // SDA - GPIOB7
  32:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_7,
ARM GAS  /tmp/ccr1UdHJ.s 			page 2


  33:Drivers/Oled/Src/oled_driver.c ****                        LL_GPIO_MODE_ALTERNATE);
  34:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_7,
  35:Drivers/Oled/Src/oled_driver.c ****                              LL_GPIO_OUTPUT_OPENDRAIN);
  36:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_7, LL_GPIO_AF_1);
  37:Drivers/Oled/Src/oled_driver.c ****     LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_7,
  38:Drivers/Oled/Src/oled_driver.c ****                         LL_GPIO_SPEED_FREQ_HIGH);
  39:Drivers/Oled/Src/oled_driver.c ****     /*
  40:Drivers/Oled/Src/oled_driver.c ****      * Clock on the I2C peripheral and set it up
  41:Drivers/Oled/Src/oled_driver.c ****      */
  42:Drivers/Oled/Src/oled_driver.c ****     LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
  43:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_Disable(I2C1);
  44:Drivers/Oled/Src/oled_driver.c ****     LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
  45:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_DisableAnalogFilter(I2C1);
  46:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_SetDigitalFilter(I2C1, 1);
  47:Drivers/Oled/Src/oled_driver.c ****     /*
  48:Drivers/Oled/Src/oled_driver.c ****      * Set I2C speed to 400 kHz, for further details refer
  49:Drivers/Oled/Src/oled_driver.c ****      * to lecture
  50:Drivers/Oled/Src/oled_driver.c ****      */
  51:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_SetTiming(I2C1, __LL_I2C_CONVERT_TIMINGS(5, 3, 3, 3, 9));
  52:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_DisableClockStretching(I2C1);
  53:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_7BIT);
  54:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_SetMode(I2C1, LL_I2C_MODE_I2C);
  55:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_Enable(I2C1);
  56:Drivers/Oled/Src/oled_driver.c **** 
  57:Drivers/Oled/Src/oled_driver.c ****     return;
  58:Drivers/Oled/Src/oled_driver.c **** }
  59:Drivers/Oled/Src/oled_driver.c **** 
  60:Drivers/Oled/Src/oled_driver.c **** static uint8_t oled_cmd_send(uint8_t byte)
  61:Drivers/Oled/Src/oled_driver.c **** {
  27              		.loc 1 61 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  62:Drivers/Oled/Src/oled_driver.c ****     /*
  63:Drivers/Oled/Src/oled_driver.c ****      * Initiate transmission
  64:Drivers/Oled/Src/oled_driver.c ****      * Display address = 0x78
  65:Drivers/Oled/Src/oled_driver.c ****      */
  66:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_HandleTransfer(I2C1, 0x78, LL_I2C_ADDRSLAVE_7BIT,
  32              		.loc 1 66 5 view .LVU1
  33              	.LBB26:
  34              	.LBI26:
  35              		.file 2 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @file    stm32f0xx_ll_i2c.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief   Header file of I2C LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * License. You may obtain a copy of the License at:
ARM GAS  /tmp/ccr1UdHJ.s 			page 3


  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #ifndef STM32F0xx_LL_I2C_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define STM32F0xx_LL_I2C_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined (I2C1) || defined (I2C2)
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL I2C
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Private_Constants I2C Private Constants
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Private macros ------------------------------------------------------------*/
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(USE_FULL_LL_DRIVER)
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Private_Macros I2C Private Macros
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_ES_INIT I2C Exported Init structure
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** typedef struct
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t PeripheralMode;      /*!< Specifies the peripheral mode.
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_PERIPHERAL_MOD
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  /tmp/ccr1UdHJ.s 			page 4


  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetMode(). */
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t Timing;              /*!< Specifies the SDA setup, hold time and the SCL high, low perio
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter must be set by referring to the STM32CubeMX Too
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      the helper macro @ref __LL_I2C_CONVERT_TIMINGS().
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetTiming(). */
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t AnalogFilter;        /*!< Enables or disables analog noise filter.
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_ANALOGFILTER_S
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_EnableAnalogFilter() or LL_I2C_DisableAnalogFilter
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t DigitalFilter;       /*!< Configures the digital noise filter.
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a number between Min_Data = 0x00 and Max
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetDigitalFilter(). */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t OwnAddress1;         /*!< Specifies the device own address 1.
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter must be a value between Min_Data = 0x00 and Max
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetOwnAddress1(). */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t TypeAcknowledge;     /*!< Specifies the ACKnowledge or Non ACKnowledge condition after t
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      match code or next received byte.
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_I2C_ACKNOWLEDG
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_AcknowledgeNextData(). */
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t OwnAddrSize;         /*!< Specifies the device own address 1 size (7-bit or 10-bit).
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This parameter can be a value of @ref I2C_LL_EC_OWNADDRESS1.
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      This feature can be modified afterwards using unitary function
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                      @ref LL_I2C_SetOwnAddress1(). */
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** } LL_I2C_InitTypeDef;
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /*USE_FULL_LL_DRIVER*/
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported constants --------------------------------------------------------*/
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Constants I2C Exported Constants
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_CLEAR_FLAG Clear Flags Defines
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    Flags defines which can be used with LL_I2C_WriteReg function
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ADDRCF                   I2C_ICR_ADDRCF          /*!< Address Matched flag   */
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_NACKCF                   I2C_ICR_NACKCF          /*!< Not Acknowledge flag   */
ARM GAS  /tmp/ccr1UdHJ.s 			page 5


 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_STOPCF                   I2C_ICR_STOPCF          /*!< Stop detection flag    */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_BERRCF                   I2C_ICR_BERRCF          /*!< Bus error flag         */
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ARLOCF                   I2C_ICR_ARLOCF          /*!< Arbitration Lost flag  */
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_OVRCF                    I2C_ICR_OVRCF           /*!< Overrun/Underrun flag  */
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_PECCF                    I2C_ICR_PECCF           /*!< PEC error flag         */
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_TIMOUTCF                 I2C_ICR_TIMOUTCF        /*!< Timeout detection flag */
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ICR_ALERTCF                  I2C_ICR_ALERTCF         /*!< Alert flag             */
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_GET_FLAG Get Flags Defines
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    Flags defines which can be used with LL_I2C_ReadReg function
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TXE                      I2C_ISR_TXE             /*!< Transmit data register emp
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TXIS                     I2C_ISR_TXIS            /*!< Transmit interrupt status 
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_RXNE                     I2C_ISR_RXNE            /*!< Receive data register not 
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ADDR                     I2C_ISR_ADDR            /*!< Address matched (slave mod
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_NACKF                    I2C_ISR_NACKF           /*!< Not Acknowledge received f
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_STOPF                    I2C_ISR_STOPF           /*!< Stop detection flag       
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TC                       I2C_ISR_TC              /*!< Transfer Complete (master 
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TCR                      I2C_ISR_TCR             /*!< Transfer Complete Reload  
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_BERR                     I2C_ISR_BERR            /*!< Bus error                 
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ARLO                     I2C_ISR_ARLO            /*!< Arbitration lost          
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_OVR                      I2C_ISR_OVR             /*!< Overrun/Underrun (slave mo
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_PECERR                   I2C_ISR_PECERR          /*!< PEC Error in reception (SM
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_TIMEOUT                  I2C_ISR_TIMEOUT         /*!< Timeout detection flag (SM
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_ALERT                    I2C_ISR_ALERT           /*!< SMBus alert (SMBus mode)  
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ISR_BUSY                     I2C_ISR_BUSY            /*!< Bus busy                  
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_IT IT Defines
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief    IT defines which can be used with LL_I2C_ReadReg and  LL_I2C_WriteReg functions
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_TXIE                     I2C_CR1_TXIE            /*!< TX Interrupt enable       
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_RXIE                     I2C_CR1_RXIE            /*!< RX Interrupt enable       
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_ADDRIE                   I2C_CR1_ADDRIE          /*!< Address match Interrupt en
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_NACKIE                   I2C_CR1_NACKIE          /*!< Not acknowledge received I
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_STOPIE                   I2C_CR1_STOPIE          /*!< STOP detection Interrupt e
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_TCIE                     I2C_CR1_TCIE            /*!< Transfer Complete interrup
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_CR1_ERRIE                    I2C_CR1_ERRIE           /*!< Error interrupts enable   
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_PERIPHERAL_MODE Peripheral Mode
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_I2C                    0x00000000U              /*!< I2C Master or Slave mode  
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_HOST             I2C_CR1_SMBHEN           /*!< SMBus Host address acknowl
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_DEVICE           0x00000000U              /*!< SMBus Device default mode
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                          (Default address not ackno
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_DEVICE_ARP       I2C_CR1_SMBDEN           /*!< SMBus Device Default addre
ARM GAS  /tmp/ccr1UdHJ.s 			page 6


 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ANALOGFILTER_SELECTION Analog Filter Selection
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ANALOGFILTER_ENABLE          0x00000000U             /*!< Analog filter is enabled. 
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ANALOGFILTER_DISABLE         I2C_CR1_ANFOFF          /*!< Analog filter is disabled.
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ADDRESSING_MODE Master Addressing Mode
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRESSING_MODE_7BIT         0x00000000U              /*!< Master operates in 7-bit 
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRESSING_MODE_10BIT        I2C_CR2_ADD10            /*!< Master operates in 10-bit
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_OWNADDRESS1 Own Address 1 Length
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS1_7BIT             0x00000000U             /*!< Own address 1 is a 7-bit a
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS1_10BIT            I2C_OAR1_OA1MODE        /*!< Own address 1 is a 10-bit 
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_OWNADDRESS2 Own Address 2 Masks
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_NOMASK           I2C_OAR2_OA2NOMASK      /*!< Own Address2 No mask.     
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK01           I2C_OAR2_OA2MASK01      /*!< Only Address2 bits[7:2] ar
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK02           I2C_OAR2_OA2MASK02      /*!< Only Address2 bits[7:3] ar
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK03           I2C_OAR2_OA2MASK03      /*!< Only Address2 bits[7:4] ar
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK04           I2C_OAR2_OA2MASK04      /*!< Only Address2 bits[7:5] ar
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK05           I2C_OAR2_OA2MASK05      /*!< Only Address2 bits[7:6] ar
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK06           I2C_OAR2_OA2MASK06      /*!< Only Address2 bits[7] are 
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_OWNADDRESS2_MASK07           I2C_OAR2_OA2MASK07      /*!< No comparison is done.
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                          All Address2 are acknowled
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_I2C_ACKNOWLEDGE Acknowledge Generation
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ACK                          0x00000000U              /*!< ACK is sent after current
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_NACK                         I2C_CR2_NACK             /*!< NACK is sent after curren
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_ADDRSLAVE Slave Address Length
ARM GAS  /tmp/ccr1UdHJ.s 			page 7


 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRSLAVE_7BIT               0x00000000U              /*!< Slave Address in 7-bit. *
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ADDRSLAVE_10BIT              I2C_CR2_ADD10            /*!< Slave Address in 10-bit.*
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_REQUEST Transfer Request Direction
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_REQUEST_WRITE                0x00000000U              /*!< Master request a write tr
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_REQUEST_READ                 I2C_CR2_RD_WRN           /*!< Master request a read tra
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_MODE Transfer End Mode
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_RELOAD                  I2C_CR2_RELOAD           /*!< Enable I2C Reload mode.  
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_AUTOEND                 I2C_CR2_AUTOEND          /*!< Enable I2C Automatic end 
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with no HW PEC comparison
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SOFTEND                 0x00000000U              /*!< Enable I2C Software end m
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with no HW PEC comparison
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_RELOAD            LL_I2C_MODE_RELOAD       /*!< Enable SMBUS Automatic en
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC    LL_I2C_MODE_AUTOEND      /*!< Enable SMBUS Automatic en
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC    LL_I2C_MODE_SOFTEND      /*!< Enable SMBUS Software end
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           with HW PEC comparison.  
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC  (uint32_t)(LL_I2C_MODE_AUTOEND | I2C_CR2_PECBYTE)
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Enable SMBUS Automatic end mode with HW PEC comparison.   */
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC  (uint32_t)(LL_I2C_MODE_SOFTEND | I2C_CR2_PECBYTE)
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Enable SMBUS Software end mode with HW PEC comparison.    */
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_GENERATE Start And Stop Generation
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_NOSTARTSTOP         0x00000000U
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Don't Generate Stop and Start condition. */
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_STOP                (uint32_t)(0x80000000U | I2C_CR2_STOP)
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Stop condition (Size should be set to 0).      */
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_START_READ          (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Start for read request. */
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_START_WRITE         (uint32_t)(0x80000000U | I2C_CR2_START)
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Start for write request. */
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_7BIT_READ   (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for read request, slave 7Bit address.  */
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_7BIT_WRITE  (uint32_t)(0x80000000U | I2C_CR2_START)
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for write request, slave 7Bit address. */
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_10BIT_READ  (uint32_t)(0x80000000U | I2C_CR2_START | \
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                        I2C_CR2_RD_WRN | I2C_CR2_HEAD10R)
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for read request, slave 10Bit address. */
ARM GAS  /tmp/ccr1UdHJ.s 			page 8


 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_GENERATE_RESTART_10BIT_WRITE (uint32_t)(0x80000000U | I2C_CR2_START)
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /*!< Generate Restart for write request, slave 10Bit address.*/
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_DIRECTION Read Write Direction
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DIRECTION_WRITE              0x00000000U              /*!< Write transfer request by
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           slave enters receiver mod
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DIRECTION_READ               I2C_ISR_DIR              /*!< Read transfer request by 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           slave enters transmitter 
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_DMA_REG_DATA DMA Register Data
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DMA_REG_DATA_TRANSMIT        0x00000000U              /*!< Get address of data regis
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           transmission */
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_DMA_REG_DATA_RECEIVE         0x00000001U              /*!< Get address of data regis
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           reception */
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_SMBUS_TIMEOUTA_MODE SMBus TimeoutA Mode SCL SDA Timeout
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW      0x00000000U          /*!< TimeoutA is used to detec
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           SCL low level timeout.   
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH I2C_TIMEOUTR_TIDLE   /*!< TimeoutA is used to detec
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                           both SCL and SDA high lev
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EC_SMBUS_TIMEOUT_SELECTION SMBus Timeout Selection
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTA               I2C_TIMEOUTR_TIMOUTEN                 /*!< TimeoutA ena
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_TIMEOUTB               I2C_TIMEOUTR_TEXTEN                   /*!< TimeoutB (ex
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                                                        enable bit  
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_SMBUS_ALL_TIMEOUT            (uint32_t)(I2C_TIMEOUTR_TIMOUTEN | \
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                        I2C_TIMEOUTR_TEXTEN)       /*!< TimeoutA and
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** (extended clock) enable bits */
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported macro ------------------------------------------------------------*/
ARM GAS  /tmp/ccr1UdHJ.s 			page 9


 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Macros I2C Exported Macros
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EM_WRITE_READ Common Write and read registers Macros
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Write a value in I2C register
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __INSTANCE__ I2C Instance
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __REG__ Register to be written
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __VALUE__ Value to be written in the register
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Read a value in I2C register
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __INSTANCE__ I2C Instance
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __REG__ Register to be read
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Register value
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define LL_I2C_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EM_CONVERT_TIMINGS Convert SDA SCL timings
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SDA setup, hold time and the SCL high, low period.
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __PRESCALER__ This parameter must be a value between  Min_Data=0 and Max_Data=0xF.
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SETUP_TIME__ This parameter must be a value between Min_Data=0 and Max_Data=0xF.
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                            (tscldel = (SCLDEL+1)xtpresc)
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __HOLD_TIME__  This parameter must be a value between Min_Data=0 and Max_Data=0xF.
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                            (tsdadel = SDADELxtpresc)
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SCLH_PERIOD__ This parameter must be a value between Min_Data=0 and Max_Data=0xFF.
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                             (tsclh = (SCLH+1)xtpresc)
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  __SCLL_PERIOD__ This parameter must be a value between  Min_Data=0 and Max_Data=0xFF.
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                             (tscll = (SCLL+1)xtpresc)
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFFFFFFF
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #define __LL_I2C_CONVERT_TIMINGS(__PRESCALER__, __SETUP_TIME__, __HOLD_TIME__, __SCLH_PERIOD__, __S
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   ((((uint32_t)(__PRESCALER__)    << I2C_TIMINGR_PRESC_Pos)  & I2C_TIMINGR_PRESC)   | \
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SETUP_TIME__)   << I2C_TIMINGR_SCLDEL_Pos) & I2C_TIMINGR_SCLDEL)  | \
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__HOLD_TIME__)    << I2C_TIMINGR_SDADEL_Pos) & I2C_TIMINGR_SDADEL)  | \
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SCLH_PERIOD__)  << I2C_TIMINGR_SCLH_Pos)   & I2C_TIMINGR_SCLH)    | \
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****    (((uint32_t)(__SCLL_PERIOD__)  << I2C_TIMINGR_SCLL_Pos)   & I2C_TIMINGR_SCLL))
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  /tmp/ccr1UdHJ.s 			page 10


 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /* Exported functions --------------------------------------------------------*/
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_Exported_Functions I2C Exported Functions
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_Configuration Configuration
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable I2C peripheral (PE = 1).
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_Enable
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable I2C peripheral (PE = 0).
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When PE = 0, the I2C SCL and SDA lines are released.
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Internal state machines and status bits are put back to their reset value.
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         When cleared, PE must be kept low for at least 3 APB clock cycles.
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_Disable
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the I2C peripheral is enabled or disabled.
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PE            LL_I2C_IsEnabled
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE)) ? 1UL : 0UL);
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure Noise Filters (Analog and Digital).
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   If the analog filter is also enabled, the digital filter is added to analog filter.
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The filters can only be programmed when the I2C is disabled (PE = 0).
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_ConfigFilters\n
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          DNF           LL_I2C_ConfigFilters
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  AnalogFilter This parameter can be one of the following values:
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ANALOGFILTER_ENABLE
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ANALOGFILTER_DISABLE
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disa
ARM GAS  /tmp/ccr1UdHJ.s 			page 11


 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                           and Max_Data=0x0F (Digital filter enabled and filtering capability up to 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This parameter is used to configure the digital noise filter on SDA and SCL input.
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t Digita
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure Digital Noise Filter.
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   If the analog filter is also enabled, the digital filter is added to analog filter.
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This filter can only be programmed when the I2C is disabled (PE = 0).
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          DNF           LL_I2C_SetDigitalFilter
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disa
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                           and Max_Data=0x0F (Digital filter enabled and filtering capability up to 
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This parameter is used to configure the digital noise filter on SDA and SCL input.
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetDigitalFilter(I2C_TypeDef *I2Cx, uint32_t DigitalFilter)
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_DNF, DigitalFilter << I2C_CR1_DNF_Pos);
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the current Digital Noise Filter configuration.
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          DNF           LL_I2C_GetDigitalFilter
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDigitalFilter(I2C_TypeDef *I2Cx)
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR1, I2C_CR1_DNF) >> I2C_CR1_DNF_Pos);
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Analog Noise Filter.
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This filter can only be programmed when the I2C is disabled (PE = 0).
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_EnableAnalogFilter
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAnalogFilter(I2C_TypeDef *I2Cx)
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ANFOFF);
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Analog Noise Filter.
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This filter can only be programmed when the I2C is disabled (PE = 0).
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_DisableAnalogFilter
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  /tmp/ccr1UdHJ.s 			page 12


 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAnalogFilter(I2C_TypeDef *I2Cx)
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ANFOFF);
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Analog Noise Filter is enabled or disabled.
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ANFOFF        LL_I2C_IsEnabledAnalogFilter
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAnalogFilter(I2C_TypeDef *I2Cx)
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ANFOFF) != (I2C_CR1_ANFOFF)) ? 1UL : 0UL);
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable DMA transmission requests.
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_EnableDMAReq_TX
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableDMAReq_TX(I2C_TypeDef *I2Cx)
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable DMA transmission requests.
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_DisableDMAReq_TX
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableDMAReq_TX(I2C_TypeDef *I2Cx)
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if DMA transmission requests are enabled or disabled.
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXDMAEN       LL_I2C_IsEnabledDMAReq_TX
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_TX(I2C_TypeDef *I2Cx)
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN) == (I2C_CR1_TXDMAEN)) ? 1UL : 0UL);
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable DMA reception requests.
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_EnableDMAReq_RX
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableDMAReq_RX(I2C_TypeDef *I2Cx)
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
ARM GAS  /tmp/ccr1UdHJ.s 			page 13


 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable DMA reception requests.
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_DisableDMAReq_RX
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableDMAReq_RX(I2C_TypeDef *I2Cx)
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if DMA reception requests are enabled or disabled.
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXDMAEN       LL_I2C_IsEnabledDMAReq_RX
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledDMAReq_RX(I2C_TypeDef *I2Cx)
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN) == (I2C_CR1_RXDMAEN)) ? 1UL : 0UL);
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the data register address used for DMA transfer
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TXDR         TXDATA        LL_I2C_DMA_GetRegAddr\n
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         RXDR         RXDATA        LL_I2C_DMA_GetRegAddr
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Direction This parameter can be one of the following values:
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DMA_REG_DATA_TRANSMIT
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DMA_REG_DATA_RECEIVE
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Address of data register
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx, uint32_t Direction)
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   uint32_t data_reg_addr;
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   {
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     /* return address of TXDR register */
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   }
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   else
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   {
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     /* return address of RXDR register */
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****     data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   }
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return data_reg_addr;
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Clock stretching.
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
ARM GAS  /tmp/ccr1UdHJ.s 			page 14


 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Clock stretching.
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_DisableClockStretching
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Clock stretching is enabled or disabled.
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NOSTRETCH     LL_I2C_IsEnabledClockStretching
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledClockStretching(I2C_TypeDef *I2Cx)
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH) != (I2C_CR1_NOSTRETCH)) ? 1UL : 0UL);
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable hardware byte control in slave mode.
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_EnableSlaveByteControl
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSlaveByteControl(I2C_TypeDef *I2Cx)
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_SBC);
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable hardware byte control in slave mode.
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_DisableSlaveByteControl
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSlaveByteControl(I2C_TypeDef *I2Cx)
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_SBC);
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if hardware byte control in slave mode is enabled or disabled.
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SBC           LL_I2C_IsEnabledSlaveByteControl
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
ARM GAS  /tmp/ccr1UdHJ.s 			page 15


 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSlaveByteControl(I2C_TypeDef *I2Cx)
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_SBC) == (I2C_CR1_SBC)) ? 1UL : 0UL);
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #if defined(I2C_CR1_WUPEN)
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Wakeup from STOP.
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when Digital Filter is disabled.
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_EnableWakeUpFromStop
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableWakeUpFromStop(I2C_TypeDef *I2Cx)
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_WUPEN);
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Wakeup from STOP.
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_DisableWakeUpFromStop
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableWakeUpFromStop(I2C_TypeDef *I2Cx)
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_WUPEN);
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Wakeup from STOP is enabled or disabled.
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_I2C_WAKEUP_FROMSTOP_INSTANCE(I2Cx) can be used to check whether or not
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         WakeUpFromStop feature is supported by the I2Cx Instance.
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          WUPEN         LL_I2C_IsEnabledWakeUpFromStop
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledWakeUpFromStop(I2C_TypeDef *I2Cx)
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_WUPEN) == (I2C_CR1_WUPEN)) ? 1UL : 0UL);
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** #endif /* I2C_CR1_WUPEN */
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable General Call.
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When enabled the Address 0x00 is ACKed.
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
ARM GAS  /tmp/ccr1UdHJ.s 			page 16


 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable General Call.
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   When disabled the Address 0x00 is NACKed.
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if General Call is enabled or disabled.
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          GCEN          LL_I2C_IsEnabledGeneralCall
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledGeneralCall(I2C_TypeDef *I2Cx)
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_GCEN) == (I2C_CR1_GCEN)) ? 1UL : 0UL);
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the Master to operate in 7-bit or 10-bit addressing mode.
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing this bit is not allowed, when the START bit is set.
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          ADD10         LL_I2C_SetMasterAddressingMode
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  AddressingMode This parameter can be one of the following values:
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the Master addressing mode.
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          ADD10         LL_I2C_GetMasterAddressingMode
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetMasterAddressingMode(I2C_TypeDef *I2Cx)
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_ADD10));
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the Own Address1.
ARM GAS  /tmp/ccr1UdHJ.s 			page 17


 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1           LL_I2C_SetOwnAddress1\n
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         OAR1         OA1MODE       LL_I2C_SetOwnAddress1
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddress1 This parameter must be a value between Min_Data=0 and Max_Data=0x3FF.
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddrSize This parameter can be one of the following values:
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAdd
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable acknowledge on Own Address1 match address.
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable acknowledge on Own Address1 match address.
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Own Address1 acknowledge is enabled or disabled.
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR1         OA1EN         LL_I2C_IsEnabledOwnAddress1
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledOwnAddress1(I2C_TypeDef *I2Cx)
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN) == (I2C_OAR1_OA1EN)) ? 1UL : 0UL);
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the 7bits Own Address2.
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This action has no effect if own address2 is enabled.
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2           LL_I2C_SetOwnAddress2\n
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         OAR2         OA2MSK        LL_I2C_SetOwnAddress2
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddress2 Value between Min_Data=0 and Max_Data=0x7F.
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  OwnAddrMask This parameter can be one of the following values:
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_NOMASK
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK01
ARM GAS  /tmp/ccr1UdHJ.s 			page 18


 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK02
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK03
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK04
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK05
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAdd
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable acknowledge on Own Address2 match address.
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_EnableOwnAddress2
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableOwnAddress2(I2C_TypeDef *I2Cx)
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable  acknowledge on Own Address2 match address.
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Own Address1 acknowledge is enabled or disabled.
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll OAR2         OA2EN         LL_I2C_IsEnabledOwnAddress2
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledOwnAddress2(I2C_TypeDef *I2Cx)
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN) == (I2C_OAR2_OA2EN)) ? 1UL : 0UL);
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SDA setup, hold time and the SCL high, low period.
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when the I2C is disabled (PE = 0).
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      TIMINGR       LL_I2C_SetTiming
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This parameter is computed with the STM32CubeMX Tool.
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
ARM GAS  /tmp/ccr1UdHJ.s 			page 19


 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMINGR, Timing);
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the Timing Prescaler setting.
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      PRESC         LL_I2C_GetTimingPrescaler
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTimingPrescaler(I2C_TypeDef *I2Cx)
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_PRESC) >> I2C_TIMINGR_PRESC_Pos);
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SCL low period setting.
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLL          LL_I2C_GetClockLowPeriod
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetClockLowPeriod(I2C_TypeDef *I2Cx)
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLL) >> I2C_TIMINGR_SCLL_Pos);
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SCL high period setting.
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLH          LL_I2C_GetClockHighPeriod
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetClockHighPeriod(I2C_TypeDef *I2Cx)
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLH) >> I2C_TIMINGR_SCLH_Pos);
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SDA hold time.
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SDADEL        LL_I2C_GetDataHoldTime
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDataHoldTime(I2C_TypeDef *I2Cx)
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SDADEL) >> I2C_TIMINGR_SDADEL_Pos);
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SDA setup time.
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMINGR      SCLDEL        LL_I2C_GetDataSetupTime
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xF
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetDataSetupTime(I2C_TypeDef *I2Cx)
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMINGR, I2C_TIMINGR_SCLDEL) >> I2C_TIMINGR_SCLDEL_Pos);
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
ARM GAS  /tmp/ccr1UdHJ.s 			page 20


 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure peripheral mode.
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SMBHEN        LL_I2C_SetMode\n
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          SMBDEN        LL_I2C_SetMode
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  PeripheralMode This parameter can be one of the following values:
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_I2C
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_HOST
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get peripheral mode.
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          SMBHEN        LL_I2C_GetMode\n
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR1          SMBDEN        LL_I2C_GetMode
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_I2C
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_HOST
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetMode(I2C_TypeDef *I2Cx)
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN));
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable SMBus alert (Host or Device mode)
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   SMBus Device mode:
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin is drived low and
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *           Alert Response Address Header acknowledge is enabled.
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Host mode:
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin management is supported.
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_EnableSMBusAlert
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusAlert(I2C_TypeDef *I2Cx)
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ALERTEN);
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
ARM GAS  /tmp/ccr1UdHJ.s 			page 21


1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable SMBus alert (Host or Device mode)
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   SMBus Device mode:
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin is not drived (can be used as a standard GPIO) and
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *           Alert Response Address Header acknowledge is disabled.
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Host mode:
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         - SMBus Alert pin management is not supported.
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_DisableSMBusAlert
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusAlert(I2C_TypeDef *I2Cx)
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ALERTEN);
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if SMBus alert (Host or Device mode) is enabled or disabled.
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ALERTEN       LL_I2C_IsEnabledSMBusAlert
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusAlert(I2C_TypeDef *I2Cx)
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ALERTEN) == (I2C_CR1_ALERTEN)) ? 1UL : 0UL);
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable SMBus Packet Error Calculation (PEC).
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_EnableSMBusPEC
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusPEC(I2C_TypeDef *I2Cx)
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_PECEN);
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable SMBus Packet Error Calculation (PEC).
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_DisableSMBusPEC
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusPEC(I2C_TypeDef *I2Cx)
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_PECEN);
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
ARM GAS  /tmp/ccr1UdHJ.s 			page 22


1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if SMBus Packet Error Calculation (PEC) is enabled or disabled.
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          PECEN         LL_I2C_IsEnabledSMBusPEC
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusPEC(I2C_TypeDef *I2Cx)
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_PECEN) == (I2C_CR1_PECEN)) ? 1UL : 0UL);
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Clock Timeout.
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This configuration can only be programmed when associated Timeout is disabled (TimeoutA
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_ConfigSMBusTimeout\n
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TIDLE         LL_I2C_ConfigSMBusTimeout\n
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TIMEOUTB      LL_I2C_ConfigSMBusTimeout
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutA This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutAMode This parameter can be one of the following values:
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutB
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ConfigSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t TimeoutA, uint32_t Timeo
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                                uint32_t TimeoutB)
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTA | I2C_TIMEOUTR_TIDLE | I2C_TIMEOUTR_TIMEOUTB,
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              TimeoutA | TimeoutAMode | (TimeoutB << I2C_TIMEOUTR_TIMEOUTB_Pos));
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Clock TimeoutA (SCL low timeout or SCL and SDA high timeout depends
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   These bits can only be programmed when TimeoutA is disabled.
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_SetSMBusTimeoutA
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutA This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutA(I2C_TypeDef *I2Cx, uint32_t TimeoutA)
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutA);
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Clock TimeoutA setting.
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTA      LL_I2C_GetSMBusTimeoutA
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFF
ARM GAS  /tmp/ccr1UdHJ.s 			page 23


1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutA(I2C_TypeDef *I2Cx)
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTA));
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Set the SMBus Clock TimeoutA mode.
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can only be programmed when TimeoutA is disabled.
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIDLE         LL_I2C_SetSMBusTimeoutAMode
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutAMode This parameter can be one of the following values:
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutAMode(I2C_TypeDef *I2Cx, uint32_t TimeoutAMode)
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutAMode);
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Clock TimeoutA mode.
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIDLE         LL_I2C_GetSMBusTimeoutAMode
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutAMode(I2C_TypeDef *I2Cx)
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIDLE));
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the SMBus Extended Cumulative Clock TimeoutB (Master or Slave mode).
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   These bits can only be programmed when TimeoutB is disabled.
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTB      LL_I2C_SetSMBusTimeoutB
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TimeoutB This parameter must be a value between  Min_Data=0 and Max_Data=0xFFF.
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSMBusTimeoutB(I2C_TypeDef *I2Cx, uint32_t TimeoutB)
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TIMEOUTR, TimeoutB << I2C_TIMEOUTR_TIMEOUTB_Pos);
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Extended Cumulative Clock TimeoutB setting.
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
ARM GAS  /tmp/ccr1UdHJ.s 			page 24


1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMEOUTB      LL_I2C_GetSMBusTimeoutB
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0 and Max_Data=0xFFF
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusTimeoutB(I2C_TypeDef *I2Cx)
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->TIMEOUTR, I2C_TIMEOUTR_TIMEOUTB) >> I2C_TIMEOUTR_TIMEOUTB_Pos);
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable the SMBus Clock Timeout.
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_EnableSMBusTimeout\n
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_EnableSMBusTimeout
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->TIMEOUTR, ClockTimeout);
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable the SMBus Clock Timeout.
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_DisableSMBusTimeout\n
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_DisableSMBusTimeout
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->TIMEOUTR, ClockTimeout);
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the SMBus Clock Timeout is enabled or disabled.
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TIMEOUTR     TIMOUTEN      LL_I2C_IsEnabledSMBusTimeout\n
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         TIMEOUTR     TEXTEN        LL_I2C_IsEnabledSMBusTimeout
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  ClockTimeout This parameter can be one of the following values:
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTA
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_TIMEOUTB
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_SMBUS_ALL_TIMEOUT
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccr1UdHJ.s 			page 25


1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->TIMEOUTR, (I2C_TIMEOUTR_TIMOUTEN | I2C_TIMEOUTR_TEXTEN)) == \
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****            (ClockTimeout)) ? 1UL : 0UL);
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_IT_Management IT_Management
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable TXIS interrupt.
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_EnableIT_TX
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable TXIS interrupt.
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_DisableIT_TX
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the TXIS Interrupt is enabled or disabled.
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TXIE          LL_I2C_IsEnabledIT_TX
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXIE) == (I2C_CR1_TXIE)) ? 1UL : 0UL);
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable RXNE interrupt.
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
ARM GAS  /tmp/ccr1UdHJ.s 			page 26


1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable RXNE interrupt.
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the RXNE Interrupt is enabled or disabled.
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          RXIE          LL_I2C_IsEnabledIT_RX
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_RX(I2C_TypeDef *I2Cx)
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXIE) == (I2C_CR1_RXIE)) ? 1UL : 0UL);
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Address match interrupt (slave mode only).
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_EnableIT_ADDR
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_ADDR(I2C_TypeDef *I2Cx)
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Address match interrupt (slave mode only).
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_DisableIT_ADDR
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_ADDR(I2C_TypeDef *I2Cx)
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Address match interrupt is enabled or disabled.
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ADDRIE        LL_I2C_IsEnabledIT_ADDR
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_ADDR(I2C_TypeDef *I2Cx)
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ADDRIE) == (I2C_CR1_ADDRIE)) ? 1UL : 0UL);
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  /tmp/ccr1UdHJ.s 			page 27


1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Not acknowledge received interrupt.
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_EnableIT_NACK
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_NACK(I2C_TypeDef *I2Cx)
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Not acknowledge received interrupt.
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_DisableIT_NACK
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_NACK(I2C_TypeDef *I2Cx)
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Not acknowledge received interrupt is enabled or disabled.
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          NACKIE        LL_I2C_IsEnabledIT_NACK
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_NACK(I2C_TypeDef *I2Cx)
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_NACKIE) == (I2C_CR1_NACKIE)) ? 1UL : 0UL);
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable STOP detection interrupt.
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_EnableIT_STOP
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_STOP(I2C_TypeDef *I2Cx)
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable STOP detection interrupt.
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_DisableIT_STOP
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_STOP(I2C_TypeDef *I2Cx)
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if STOP detection interrupt is enabled or disabled.
ARM GAS  /tmp/ccr1UdHJ.s 			page 28


1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          STOPIE        LL_I2C_IsEnabledIT_STOP
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_STOP(I2C_TypeDef *I2Cx)
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_STOPIE) == (I2C_CR1_STOPIE)) ? 1UL : 0UL);
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Transfer Complete interrupt.
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these events will generate interrupt :
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete (TC)
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete Reload (TCR)
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_EnableIT_TC
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_TC(I2C_TypeDef *I2Cx)
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Transfer Complete interrupt.
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these events will generate interrupt :
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete (TC)
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Transfer Complete Reload (TCR)
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_DisableIT_TC
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_TC(I2C_TypeDef *I2Cx)
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Transfer Complete interrupt is enabled or disabled.
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          TCIE          LL_I2C_IsEnabledIT_TC
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TC(I2C_TypeDef *I2Cx)
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_TCIE) == (I2C_CR1_TCIE)) ? 1UL : 0UL);
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable Error interrupts.
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these errors will generate interrupt :
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Arbitration Loss (ARLO)
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Bus Error detection (BERR)
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Overrun/Underrun (OVR)
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Timeout detection (TIMEOUT)
ARM GAS  /tmp/ccr1UdHJ.s 			page 29


1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus PEC error detection (PECERR)
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Alert pin event detection (ALERT)
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_EnableIT_ERR
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable Error interrupts.
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Any of these errors will generate interrupt :
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Arbitration Loss (ARLO)
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Bus Error detection (BERR)
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Overrun/Underrun (OVR)
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Timeout detection (TIMEOUT)
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus PEC error detection (PECERR)
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus Alert pin event detection (ALERT)
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_DisableIT_ERR
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableIT_ERR(I2C_TypeDef *I2Cx)
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if Error interrupts are enabled or disabled.
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR1          ERRIE         LL_I2C_IsEnabledIT_ERR
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_ERR(I2C_TypeDef *I2Cx)
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR1, I2C_CR1_ERRIE) == (I2C_CR1_ERRIE)) ? 1UL : 0UL);
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_FLAG_management FLAG_management
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transmit data register empty flag.
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When next data is written in Transmit data register.
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When Transmit data register is empty.
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccr1UdHJ.s 			page 30


1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transmit interrupt flag.
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When next data is written in Transmit data register.
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When Transmit data register is empty.
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Receive data register not empty flag.
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: When Receive data register is read.
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received data is copied in Receive data register.
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Address matched flag (slave mode).
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received slave address matched with one of the enabled slave address.
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ADDR          LL_I2C_IsActiveFlag_ADDR
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Not Acknowledge received flag.
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a NACK is received after a byte transmission.
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
ARM GAS  /tmp/ccr1UdHJ.s 			page 31


1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Stop detection flag.
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a Stop condition is detected.
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transfer complete flag (master mode).
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When RELOAD=0, AUTOEND=0 and NBYTES date have been transferred.
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Transfer complete flag (master mode).
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When RELOAD=1 and NBYTES date have been transferred.
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TCR           LL_I2C_IsActiveFlag_TCR
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TCR(I2C_TypeDef *I2Cx)
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Bus error flag.
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a misplaced Start or Stop condition is detected.
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          BERR          LL_I2C_IsActiveFlag_BERR
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Arbitration lost flag.
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When arbitration lost.
ARM GAS  /tmp/ccr1UdHJ.s 			page 32


1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ARLO          LL_I2C_IsActiveFlag_ARLO
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Overrun/Underrun flag (slave mode).
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When an overrun/underrun error occurs (Clock Stretching Disabled).
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          OVR           LL_I2C_IsActiveFlag_OVR
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_OVR) == (I2C_ISR_OVR)) ? 1UL : 0UL);
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus PEC error flag in reception.
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When the received PEC does not match with the PEC register content.
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          PECERR        LL_I2C_IsActiveSMBusFlag_PECERR
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_PECERR) == (I2C_ISR_PECERR)) ? 1UL : 0UL);
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus Timeout detection flag.
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a timeout or extended clock timeout occurs.
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TIMEOUT       LL_I2C_IsActiveSMBusFlag_TIMEOUT
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_TIMEOUT) == (I2C_ISR_TIMEOUT)) ? 1UL : 0UL);
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of SMBus alert flag.
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
ARM GAS  /tmp/ccr1UdHJ.s 			page 33


1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When SMBus host configuration, SMBus alert enabled and
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *              a falling edge event occurs on SMBA pin.
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ALERT         LL_I2C_IsActiveSMBusFlag_ALERT
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_ALERT) == (I2C_ISR_ALERT)) ? 1UL : 0UL);
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the status of Bus Busy flag.
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Clear default value.
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: When a Start condition is detected.
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Address Matched flag.
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ADDRCF        LL_I2C_ClearFlag_ADDR
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Not Acknowledge flag.
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Stop detection flag.
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
ARM GAS  /tmp/ccr1UdHJ.s 			page 34


1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Transmit data register empty flag (TXE).
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This bit can be clear by software in order to flush the transmit data register (TXDR).
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          TXE           LL_I2C_ClearFlag_TXE
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_TXE(I2C_TypeDef *I2Cx)
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Bus error flag.
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          BERRCF        LL_I2C_ClearFlag_BERR
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Arbitration lost flag.
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ARLOCF        LL_I2C_ClearFlag_ARLO
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear Overrun/Underrun flag.
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          OVRCF         LL_I2C_ClearFlag_OVR
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_OVRCF);
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus PEC error flag.
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          PECCF         LL_I2C_ClearSMBusFlag_PECERR
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_PECCF);
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
ARM GAS  /tmp/ccr1UdHJ.s 			page 35


1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus Timeout detection flag.
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          TIMOUTCF      LL_I2C_ClearSMBusFlag_TIMEOUT
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_TIMOUTCF);
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Clear SMBus Alert flag.
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ICR          ALERTCF       LL_I2C_ClearSMBusFlag_ALERT
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_ClearSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->ICR, I2C_ICR_ALERTCF);
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @}
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /** @defgroup I2C_LL_EF_Data_Management Data_Management
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @{
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable automatic STOP condition generation (master mode).
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Automatic end mode : a STOP condition is automatically sent when NBYTES data are transf
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This bit has no effect in slave mode or when RELOAD bit is set.
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable automatic STOP condition generation (master mode).
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Software end mode : TC flag is set when NBYTES data are transferre, stretching SCL low.
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_DisableAutoEndMode
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
ARM GAS  /tmp/ccr1UdHJ.s 			page 36


1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if automatic STOP condition is enabled or disabled.
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          AUTOEND       LL_I2C_IsEnabledAutoEndMode
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAutoEndMode(I2C_TypeDef *I2Cx)
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_AUTOEND) == (I2C_CR2_AUTOEND)) ? 1UL : 0UL);
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable reload mode (master mode).
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The transfer is not completed after the NBYTES data transfer, NBYTES will be reloaded w
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_EnableReloadMode
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableReloadMode(I2C_TypeDef *I2Cx)
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable reload mode (master mode).
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The transfer is completed after the NBYTES data transfer(STOP or RESTART will follow).
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_DisableReloadMode
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableReloadMode(I2C_TypeDef *I2Cx)
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if reload mode is enabled or disabled.
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RELOAD       LL_I2C_IsEnabledReloadMode
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the number of bytes for transfer.
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NBYTES           LL_I2C_SetTransferSize
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
ARM GAS  /tmp/ccr1UdHJ.s 			page 37


1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the number of bytes configured for transfer.
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NBYTES           LL_I2C_GetTransferSize
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0xFF
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferSize(I2C_TypeDef *I2Cx)
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_NBYTES) >> I2C_CR2_NBYTES_Pos);
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Prepare the generation of a ACKnowledge or Non ACKnowledge condition after the address 
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****             or next received byte.
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Usage in Slave mode only.
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          NACK          LL_I2C_AcknowledgeNextData
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TypeAcknowledge This parameter can be one of the following values:
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ACK
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_NACK
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Generate a START or RESTART condition
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The START bit can be set even if bus is BUSY or I2C is in slave mode.
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This action has no effect when RELOAD is set.
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          START           LL_I2C_GenerateStartCondition
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_START);
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Generate a STOP condition after the current byte transfer (master mode).
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
ARM GAS  /tmp/ccr1UdHJ.s 			page 38


2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable automatic RESTART Read request condition for 10bit address header (master mode).
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The master sends the complete 10bit slave address read sequence :
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         Start + 2 bytes 10bit address in Write direction + Restart + first 7 bits of 10bit addr
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****             in Read direction.
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_EnableAuto10BitRead
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableAuto10BitRead(I2C_TypeDef *I2Cx)
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   CLEAR_BIT(I2Cx->CR2, I2C_CR2_HEAD10R);
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Disable automatic RESTART Read request condition for 10bit address header (master mode)
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The master only sends the first 7 bits of 10bit address in Read direction.
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_DisableAuto10BitRead
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_DisableAuto10BitRead(I2C_TypeDef *I2Cx)
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_HEAD10R);
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if automatic RESTART Read request condition for 10bit address header is enabled o
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          HEAD10R       LL_I2C_IsEnabledAuto10BitRead
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledAuto10BitRead(I2C_TypeDef *I2Cx)
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_HEAD10R) != (I2C_CR2_HEAD10R)) ? 1UL : 0UL);
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the transfer direction (master mode).
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RD_WRN           LL_I2C_SetTransferRequest
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferRequest This parameter can be one of the following values:
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_WRITE
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_READ
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the transfer direction requested (master mode).
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          RD_WRN           LL_I2C_GetTransferRequest
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_WRITE
ARM GAS  /tmp/ccr1UdHJ.s 			page 39


2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_REQUEST_READ
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferRequest(I2C_TypeDef *I2Cx)
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_RD_WRN));
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Configure the slave address for transfer (master mode).
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   Changing these bits when START bit is set is not allowed.
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD           LL_I2C_SetSlaveAddr
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the slave address programmed for transfer.
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD           LL_I2C_GetSlaveAddr
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x0 and Max_Data=0x3F
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSlaveAddr(I2C_TypeDef *I2Cx)
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->CR2, I2C_CR2_SADD));
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Handles I2Cx communication when starting transfer or during transfer (TC or TCR flag ar
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          SADD          LL_I2C_HandleTransfer\n
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          ADD10         LL_I2C_HandleTransfer\n
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          RD_WRN        LL_I2C_HandleTransfer\n
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          START         LL_I2C_HandleTransfer\n
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          STOP          LL_I2C_HandleTransfer\n
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          RELOAD        LL_I2C_HandleTransfer\n
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          NBYTES        LL_I2C_HandleTransfer\n
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          AUTOEND       LL_I2C_HandleTransfer\n
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         CR2          HEAD10R       LL_I2C_HandleTransfer
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddr Specifies the slave address to be programmed.
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  SlaveAddrSize This parameter can be one of the following values:
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRSLAVE_7BIT
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_ADDRSLAVE_10BIT
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  TransferSize Specifies the number of bytes to be programmed.
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *                       This parameter must be a value between Min_Data=0 and Max_Data=255.
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  EndMode This parameter can be one of the following values:
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_RELOAD
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_AUTOEND
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SOFTEND
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_RELOAD
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC
ARM GAS  /tmp/ccr1UdHJ.s 			page 40


2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Request This parameter can be one of the following values:
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_NOSTARTSTOP
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_STOP
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_START_READ
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_START_WRITE
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_7BIT_READ
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_7BIT_WRITE
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_READ
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAdd
  36              		.loc 2 2136 22 view .LVU2
  37              	.LBB27:
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                            uint32_t TransferSize, uint32_t EndMode, uint32_t Reques
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
  38              		.loc 2 2139 3 view .LVU3
  39 0000 0C49     		ldr	r1, .L5
  40 0002 4B68     		ldr	r3, [r1, #4]
  41 0004 0C4A     		ldr	r2, .L5+4
  42 0006 1A40     		ands	r2, r3
  43 0008 0C4B     		ldr	r3, .L5+8
  44 000a 1343     		orrs	r3, r2
  45 000c 4B60     		str	r3, [r1, #4]
  46              	.LVL1:
  47              	.L2:
  48              		.loc 2 2139 3 is_stmt 0 view .LVU4
  49              	.LBE27:
  50              	.LBE26:
  67:Drivers/Oled/Src/oled_driver.c ****                           2, LL_I2C_MODE_AUTOEND,
  68:Drivers/Oled/Src/oled_driver.c ****                           LL_I2C_GENERATE_START_WRITE);
  69:Drivers/Oled/Src/oled_driver.c ****     /*
  70:Drivers/Oled/Src/oled_driver.c ****      * Send Control byte (Co = 0, D/C# = 0)
  71:Drivers/Oled/Src/oled_driver.c ****      */
  72:Drivers/Oled/Src/oled_driver.c ****     while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
  51              		.loc 1 72 44 is_stmt 1 discriminator 1 view .LVU5
  52              		.loc 1 72 11 discriminator 1 view .LVU6
  53              	.LBB28:
  54              	.LBI28:
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
  55              		.loc 2 1568 26 discriminator 1 view .LVU7
  56              	.LBB29:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  57              		.loc 2 1570 3 discriminator 1 view .LVU8
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  58              		.loc 2 1570 12 is_stmt 0 discriminator 1 view .LVU9
  59 000e 094B     		ldr	r3, .L5
  60 0010 9B69     		ldr	r3, [r3, #24]
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  61              		.loc 2 1570 71 discriminator 1 view .LVU10
  62 0012 9B07     		lsls	r3, r3, #30
  63 0014 FBD5     		bpl	.L2
  64              	.LVL2:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  65              		.loc 2 1570 71 discriminator 1 view .LVU11
ARM GAS  /tmp/ccr1UdHJ.s 			page 41


  66              	.LBE29:
  67              	.LBE28:
  73:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_TransmitData8(I2C1, 0x00);
  68              		.loc 1 73 5 is_stmt 1 view .LVU12
  69              	.LBB30:
  70              	.LBI30:
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Indicate the value of transfer direction (slave mode).
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   RESET: Write transfer, Slave enters in receiver mode.
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SET: Read transfer, Slave enters in transmitter mode.
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          DIR           LL_I2C_GetTransferDirection
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Returned value can be one of the following values:
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DIRECTION_WRITE
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         @arg @ref LL_I2C_DIRECTION_READ
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Return the slave matched address.
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll ISR          ADDCODE       LL_I2C_GetAddressMatchCode
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetAddressMatchCode(I2C_TypeDef *I2Cx)
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Enable internal comparison of the SMBus Packet Error byte (transmission or reception mo
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   This feature is cleared by hardware when the PEC byte is transferred, or when a STOP co
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****             or an Address Matched is received.
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This bit has no effect when RELOAD bit is set.
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         This bit has no effect in device mode when SBC bit is not set.
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          PECBYTE       LL_I2C_EnableSMBusPECCompare
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_EnableSMBusPECCompare(I2C_TypeDef *I2Cx)
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   SET_BIT(I2Cx->CR2, I2C_CR2_PECBYTE);
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Check if the SMBus Packet Error byte internal comparison is requested or not.
ARM GAS  /tmp/ccr1UdHJ.s 			page 42


2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll CR2          PECBYTE       LL_I2C_IsEnabledSMBusPECCompare
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval State of bit (1 or 0).
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_IsEnabledSMBusPECCompare(I2C_TypeDef *I2Cx)
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return ((READ_BIT(I2Cx->CR2, I2C_CR2_PECBYTE) == (I2C_CR2_PECBYTE)) ? 1UL : 0UL);
2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Get the SMBus Packet Error byte calculated.
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @note   The macro IS_SMBUS_ALL_INSTANCE(I2Cx) can be used to check whether or not
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   *         SMBus feature is supported by the I2Cx Instance.
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll PECR         PEC           LL_I2C_GetSMBusPEC
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint32_t LL_I2C_GetSMBusPEC(I2C_TypeDef *I2Cx)
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint32_t)(READ_BIT(I2Cx->PECR, I2C_PECR_PEC));
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Read Receive Data register.
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** 
2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** /**
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @brief  Write in Transmit Data Register .
2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @rmtoll TXDR         TXDATA        LL_I2C_TransmitData8
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  I2Cx I2C Instance.
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   * @retval None
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   */
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** __STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
  71              		.loc 2 2233 22 view .LVU13
  72              	.LBB31:
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****   WRITE_REG(I2Cx->TXDR, Data);
  73              		.loc 2 2235 3 view .LVU14
  74 0016 074B     		ldr	r3, .L5
  75 0018 0022     		movs	r2, #0
  76 001a 9A62     		str	r2, [r3, #40]
  77              	.LVL3:
  78              	.L3:
  79              		.loc 2 2235 3 is_stmt 0 view .LVU15
  80              	.LBE31:
  81              	.LBE30:
  74:Drivers/Oled/Src/oled_driver.c ****     /*
ARM GAS  /tmp/ccr1UdHJ.s 			page 43


  75:Drivers/Oled/Src/oled_driver.c ****      * Send cmd
  76:Drivers/Oled/Src/oled_driver.c ****      */
  77:Drivers/Oled/Src/oled_driver.c ****     while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
  82              		.loc 1 77 44 is_stmt 1 discriminator 1 view .LVU16
  83              		.loc 1 77 11 discriminator 1 view .LVU17
  84              	.LBB32:
  85              	.LBI32:
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
  86              		.loc 2 1568 26 discriminator 1 view .LVU18
  87              	.LBB33:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  88              		.loc 2 1570 3 discriminator 1 view .LVU19
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  89              		.loc 2 1570 12 is_stmt 0 discriminator 1 view .LVU20
  90 001c 054B     		ldr	r3, .L5
  91 001e 9B69     		ldr	r3, [r3, #24]
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  92              		.loc 2 1570 71 discriminator 1 view .LVU21
  93 0020 9B07     		lsls	r3, r3, #30
  94 0022 FBD5     		bpl	.L3
  95              	.LVL4:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
  96              		.loc 2 1570 71 discriminator 1 view .LVU22
  97              	.LBE33:
  98              	.LBE32:
  78:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_TransmitData8(I2C1, byte);
  99              		.loc 1 78 5 is_stmt 1 view .LVU23
 100              	.LBB34:
 101              	.LBI34:
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 102              		.loc 2 2233 22 view .LVU24
 103              	.LBB35:
 104              		.loc 2 2235 3 view .LVU25
 105 0024 034B     		ldr	r3, .L5
 106 0026 9862     		str	r0, [r3, #40]
 107              	.LVL5:
 108              	.L4:
 109              		.loc 2 2235 3 is_stmt 0 view .LVU26
 110              	.LBE35:
 111              	.LBE34:
  79:Drivers/Oled/Src/oled_driver.c ****     /*
  80:Drivers/Oled/Src/oled_driver.c ****      * Check for end of transmission
  81:Drivers/Oled/Src/oled_driver.c ****      */
  82:Drivers/Oled/Src/oled_driver.c ****     while (LL_I2C_IsActiveFlag_TC(I2C1));
 112              		.loc 1 82 41 is_stmt 1 discriminator 1 view .LVU27
 113              		.loc 1 82 11 discriminator 1 view .LVU28
 114              	.LBB36:
 115              	.LBI36:
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 116              		.loc 2 1633 26 discriminator 1 view .LVU29
 117              	.LBB37:
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 118              		.loc 2 1635 3 discriminator 1 view .LVU30
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 119              		.loc 2 1635 12 is_stmt 0 discriminator 1 view .LVU31
 120 0028 024B     		ldr	r3, .L5
 121 002a 9B69     		ldr	r3, [r3, #24]
ARM GAS  /tmp/ccr1UdHJ.s 			page 44


1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 122              		.loc 2 1635 67 discriminator 1 view .LVU32
 123 002c 5B06     		lsls	r3, r3, #25
 124 002e FBD4     		bmi	.L4
 125              	.LVL6:
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 126              		.loc 2 1635 67 discriminator 1 view .LVU33
 127              	.LBE37:
 128              	.LBE36:
  83:Drivers/Oled/Src/oled_driver.c ****     return 0;
 129              		.loc 1 83 5 is_stmt 1 view .LVU34
  84:Drivers/Oled/Src/oled_driver.c **** }
 130              		.loc 1 84 1 is_stmt 0 view .LVU35
 131 0030 0020     		movs	r0, #0
 132              	.LVL7:
 133              		.loc 1 84 1 view .LVU36
 134              		@ sp needed
 135 0032 7047     		bx	lr
 136              	.L6:
 137              		.align	2
 138              	.L5:
 139 0034 00540040 		.word	1073763328
 140 0038 008000FC 		.word	-67076096
 141 003c 78200282 		.word	-2113789832
 142              		.cfi_endproc
 143              	.LFE341:
 145              		.section	.text.oled_data_send,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.code	16
 149              		.thumb_func
 151              	oled_data_send:
 152              	.LVL8:
 153              	.LFB342:
  85:Drivers/Oled/Src/oled_driver.c **** 
  86:Drivers/Oled/Src/oled_driver.c **** static uint8_t oled_data_send(uint8_t *byte, uint8_t size)
  87:Drivers/Oled/Src/oled_driver.c **** {
 154              		.loc 1 87 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		.loc 1 87 1 is_stmt 0 view .LVU38
 159 0000 30B5     		push	{r4, r5, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 12
 162              		.cfi_offset 4, -12
 163              		.cfi_offset 5, -8
 164              		.cfi_offset 14, -4
  88:Drivers/Oled/Src/oled_driver.c ****     uint8_t i;
 165              		.loc 1 88 5 is_stmt 1 view .LVU39
  89:Drivers/Oled/Src/oled_driver.c **** 
  90:Drivers/Oled/Src/oled_driver.c ****     /*
  91:Drivers/Oled/Src/oled_driver.c ****      * Initiate transmission
  92:Drivers/Oled/Src/oled_driver.c ****      * Display address = 0x78
  93:Drivers/Oled/Src/oled_driver.c ****      */
  94:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_HandleTransfer(I2C1, 0x78, LL_I2C_ADDRSLAVE_7BIT,
 166              		.loc 1 94 5 view .LVU40
ARM GAS  /tmp/ccr1UdHJ.s 			page 45


  95:Drivers/Oled/Src/oled_driver.c ****                           size + 1, LL_I2C_MODE_AUTOEND,
 167              		.loc 1 95 32 is_stmt 0 view .LVU41
 168 0002 4A1C     		adds	r2, r1, #1
 169              	.LVL9:
 170              	.LBB38:
 171              	.LBI38:
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****                                            uint32_t TransferSize, uint32_t EndMode, uint32_t Reques
 172              		.loc 2 2136 22 is_stmt 1 view .LVU42
 173              	.LBB39:
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
 174              		.loc 2 2139 3 view .LVU43
 175 0004 114D     		ldr	r5, .L13
 176 0006 6B68     		ldr	r3, [r5, #4]
 177 0008 114C     		ldr	r4, .L13+4
 178 000a 2340     		ands	r3, r4
 179 000c 1404     		lsls	r4, r2, #16
 180 000e 114A     		ldr	r2, .L13+8
 181              	.LVL10:
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
 182              		.loc 2 2139 3 is_stmt 0 view .LVU44
 183 0010 2243     		orrs	r2, r4
 184 0012 1343     		orrs	r3, r2
 185 0014 6B60     		str	r3, [r5, #4]
 186              	.LVL11:
 187              	.L8:
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h ****              (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
 188              		.loc 2 2139 3 view .LVU45
 189              	.LBE39:
 190              	.LBE38:
  96:Drivers/Oled/Src/oled_driver.c ****                           LL_I2C_GENERATE_START_WRITE);
  97:Drivers/Oled/Src/oled_driver.c ****     /*
  98:Drivers/Oled/Src/oled_driver.c ****      * Send Control byte (Co = 0, D/C# = 1)
  99:Drivers/Oled/Src/oled_driver.c ****      */
 100:Drivers/Oled/Src/oled_driver.c ****     while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 191              		.loc 1 100 44 is_stmt 1 discriminator 1 view .LVU46
 192              		.loc 1 100 11 discriminator 1 view .LVU47
 193              	.LBB40:
 194              	.LBI40:
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 195              		.loc 2 1568 26 discriminator 1 view .LVU48
 196              	.LBB41:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 197              		.loc 2 1570 3 discriminator 1 view .LVU49
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 198              		.loc 2 1570 12 is_stmt 0 discriminator 1 view .LVU50
 199 0016 0D4B     		ldr	r3, .L13
 200 0018 9B69     		ldr	r3, [r3, #24]
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 201              		.loc 2 1570 71 discriminator 1 view .LVU51
 202 001a 9B07     		lsls	r3, r3, #30
 203 001c FBD5     		bpl	.L8
 204              	.LVL12:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 205              		.loc 2 1570 71 discriminator 1 view .LVU52
 206              	.LBE41:
 207              	.LBE40:
 101:Drivers/Oled/Src/oled_driver.c ****     LL_I2C_TransmitData8(I2C1, 0x40);
ARM GAS  /tmp/ccr1UdHJ.s 			page 46


 208              		.loc 1 101 5 is_stmt 1 view .LVU53
 209              	.LBB42:
 210              	.LBI42:
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 211              		.loc 2 2233 22 view .LVU54
 212              	.LBB43:
 213              		.loc 2 2235 3 view .LVU55
 214 001e 0B4B     		ldr	r3, .L13
 215 0020 4022     		movs	r2, #64
 216 0022 9A62     		str	r2, [r3, #40]
 217              	.LVL13:
 218              		.loc 2 2235 3 is_stmt 0 view .LVU56
 219              	.LBE43:
 220              	.LBE42:
 102:Drivers/Oled/Src/oled_driver.c ****     /*
 103:Drivers/Oled/Src/oled_driver.c ****      * Send data
 104:Drivers/Oled/Src/oled_driver.c ****      */
 105:Drivers/Oled/Src/oled_driver.c ****     for (i = 0; i < size; i++) {
 221              		.loc 1 105 5 is_stmt 1 view .LVU57
 222              		.loc 1 105 12 is_stmt 0 view .LVU58
 223 0024 0023     		movs	r3, #0
 224              		.loc 1 105 5 view .LVU59
 225 0026 04E0     		b	.L9
 226              	.LVL14:
 227              	.L12:
 106:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 107:Drivers/Oled/Src/oled_driver.c ****         LL_I2C_TransmitData8(I2C1, byte[i]);
 228              		.loc 1 107 9 is_stmt 1 view .LVU60
 229 0028 C45C     		ldrb	r4, [r0, r3]
 230              	.LVL15:
 231              	.LBB44:
 232              	.LBI44:
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 233              		.loc 2 2233 22 view .LVU61
 234              	.LBB45:
 235              		.loc 2 2235 3 view .LVU62
 236 002a 084A     		ldr	r2, .L13
 237 002c 9462     		str	r4, [r2, #40]
 238              	.LVL16:
 239              		.loc 2 2235 3 is_stmt 0 view .LVU63
 240              	.LBE45:
 241              	.LBE44:
 105:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 242              		.loc 1 105 27 is_stmt 1 view .LVU64
 105:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 243              		.loc 1 105 28 is_stmt 0 view .LVU65
 244 002e 0133     		adds	r3, r3, #1
 245              	.LVL17:
 105:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 246              		.loc 1 105 28 view .LVU66
 247 0030 DBB2     		uxtb	r3, r3
 248              	.LVL18:
 249              	.L9:
 105:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 250              		.loc 1 105 17 is_stmt 1 discriminator 1 view .LVU67
 105:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 251              		.loc 1 105 5 is_stmt 0 discriminator 1 view .LVU68
ARM GAS  /tmp/ccr1UdHJ.s 			page 47


 252 0032 8B42     		cmp	r3, r1
 253 0034 04D2     		bcs	.L11
 254              	.L10:
 106:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 255              		.loc 1 106 48 is_stmt 1 discriminator 1 view .LVU69
 106:Drivers/Oled/Src/oled_driver.c ****         while (!LL_I2C_IsActiveFlag_TXIS(I2C1));
 256              		.loc 1 106 15 discriminator 1 view .LVU70
 257              	.LVL19:
 258              	.LBB46:
 259              	.LBI46:
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 260              		.loc 2 1568 26 discriminator 1 view .LVU71
 261              	.LBB47:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 262              		.loc 2 1570 3 discriminator 1 view .LVU72
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 263              		.loc 2 1570 12 is_stmt 0 discriminator 1 view .LVU73
 264 0036 054A     		ldr	r2, .L13
 265 0038 9269     		ldr	r2, [r2, #24]
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 266              		.loc 2 1570 71 discriminator 1 view .LVU74
 267 003a 9207     		lsls	r2, r2, #30
 268 003c FBD5     		bpl	.L10
 269 003e F3E7     		b	.L12
 270              	.LVL20:
 271              	.L11:
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 272              		.loc 2 1570 71 discriminator 1 view .LVU75
 273              	.LBE47:
 274              	.LBE46:
 108:Drivers/Oled/Src/oled_driver.c ****     }
 109:Drivers/Oled/Src/oled_driver.c ****     /*
 110:Drivers/Oled/Src/oled_driver.c ****      * Check for end of transmission
 111:Drivers/Oled/Src/oled_driver.c ****      */
 112:Drivers/Oled/Src/oled_driver.c ****     while (LL_I2C_IsActiveFlag_TC(I2C1));
 275              		.loc 1 112 41 is_stmt 1 discriminator 1 view .LVU76
 276              		.loc 1 112 11 discriminator 1 view .LVU77
 277              	.LBB48:
 278              	.LBI48:
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** {
 279              		.loc 2 1633 26 discriminator 1 view .LVU78
 280              	.LBB49:
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 281              		.loc 2 1635 3 discriminator 1 view .LVU79
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 282              		.loc 2 1635 12 is_stmt 0 discriminator 1 view .LVU80
 283 0040 024B     		ldr	r3, .L13
 284 0042 9B69     		ldr	r3, [r3, #24]
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 285              		.loc 2 1635 67 discriminator 1 view .LVU81
 286 0044 5B06     		lsls	r3, r3, #25
 287 0046 FBD4     		bmi	.L11
 288              	.LVL21:
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_i2c.h **** }
 289              		.loc 2 1635 67 discriminator 1 view .LVU82
 290              	.LBE49:
 291              	.LBE48:
ARM GAS  /tmp/ccr1UdHJ.s 			page 48


 113:Drivers/Oled/Src/oled_driver.c ****     return 0;
 292              		.loc 1 113 5 is_stmt 1 view .LVU83
 114:Drivers/Oled/Src/oled_driver.c **** }
 293              		.loc 1 114 1 is_stmt 0 view .LVU84
 294 0048 0020     		movs	r0, #0
 295              	.LVL22:
 296              		.loc 1 114 1 view .LVU85
 297              		@ sp needed
 298 004a 30BD     		pop	{r4, r5, pc}
 299              	.L14:
 300              		.align	2
 301              	.L13:
 302 004c 00540040 		.word	1073763328
 303 0050 008000FC 		.word	-67076096
 304 0054 78200082 		.word	-2113920904
 305              		.cfi_endproc
 306              	.LFE342:
 308              		.section	.text.set_bpix,"ax",%progbits
 309              		.align	1
 310              		.syntax unified
 311              		.code	16
 312              		.thumb_func
 314              	set_bpix:
 315              	.LVL23:
 316              	.LFB350:
 115:Drivers/Oled/Src/oled_driver.c **** 
 116:Drivers/Oled/Src/oled_driver.c **** void oled_clr(enum color_t color)
 117:Drivers/Oled/Src/oled_driver.c **** {
 118:Drivers/Oled/Src/oled_driver.c ****     memset(gmem, color, GMEM_SIZE);
 119:Drivers/Oled/Src/oled_driver.c ****     return;
 120:Drivers/Oled/Src/oled_driver.c **** }
 121:Drivers/Oled/Src/oled_driver.c **** 
 122:Drivers/Oled/Src/oled_driver.c **** void oled_update(void)
 123:Drivers/Oled/Src/oled_driver.c **** {
 124:Drivers/Oled/Src/oled_driver.c ****     uint8_t i;
 125:Drivers/Oled/Src/oled_driver.c **** 
 126:Drivers/Oled/Src/oled_driver.c ****     for (i = 0; i < 8; i++) {
 127:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 128:Drivers/Oled/Src/oled_driver.c ****         oled_cmd_send(0xB0 + i);
 129:Drivers/Oled/Src/oled_driver.c ****         // Set lower column number
 130:Drivers/Oled/Src/oled_driver.c ****         oled_cmd_send(0x00);
 131:Drivers/Oled/Src/oled_driver.c ****         // Set higher column number
 132:Drivers/Oled/Src/oled_driver.c ****         oled_cmd_send(0x10);
 133:Drivers/Oled/Src/oled_driver.c ****         // Send 128 pixels
 134:Drivers/Oled/Src/oled_driver.c ****         oled_data_send(&gmem[GMEM_WIDTH * i], GMEM_WIDTH);
 135:Drivers/Oled/Src/oled_driver.c ****     }
 136:Drivers/Oled/Src/oled_driver.c **** }
 137:Drivers/Oled/Src/oled_driver.c **** 
 138:Drivers/Oled/Src/oled_driver.c **** void oled_config(void)
 139:Drivers/Oled/Src/oled_driver.c **** {
 140:Drivers/Oled/Src/oled_driver.c ****     uint32_t delay = 2000000;
 141:Drivers/Oled/Src/oled_driver.c ****     // Config hardware
 142:Drivers/Oled/Src/oled_driver.c ****     //oled_hw_config();
 143:Drivers/Oled/Src/oled_driver.c **** 
 144:Drivers/Oled/Src/oled_driver.c ****     // Wait a bit
 145:Drivers/Oled/Src/oled_driver.c ****     while (delay--);
 146:Drivers/Oled/Src/oled_driver.c **** 
ARM GAS  /tmp/ccr1UdHJ.s 			page 49


 147:Drivers/Oled/Src/oled_driver.c ****     // Set display OFF
 148:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xAE);
 149:Drivers/Oled/Src/oled_driver.c **** 
 150:Drivers/Oled/Src/oled_driver.c ****     // Set addressing mode
 151:Drivers/Oled/Src/oled_driver.c ****     // Vertical addressing mode
 152:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x20);
 153:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x10);
 154:Drivers/Oled/Src/oled_driver.c **** 
 155:Drivers/Oled/Src/oled_driver.c ****     // Vertical flip: 0xC0 - on, 0xC8 - off
 156:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xC8);
 157:Drivers/Oled/Src/oled_driver.c **** 
 158:Drivers/Oled/Src/oled_driver.c ****     // Set start line address 0-63
 159:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x40);
 160:Drivers/Oled/Src/oled_driver.c **** 
 161:Drivers/Oled/Src/oled_driver.c ****     // Set contrast level: 0-255
 162:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x81);
 163:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xFF);
 164:Drivers/Oled/Src/oled_driver.c **** 
 165:Drivers/Oled/Src/oled_driver.c ****     // Horizontal flip: 0xA1 - on, 0xA0 - off
 166:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xA1);
 167:Drivers/Oled/Src/oled_driver.c **** 
 168:Drivers/Oled/Src/oled_driver.c ****     // Normal colo - 0xA6, Inverse - 0xA7
 169:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xA6);
 170:Drivers/Oled/Src/oled_driver.c **** 
 171:Drivers/Oled/Src/oled_driver.c ****     // Number of active lines: 16 - 64
 172:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xA8);
 173:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x3F);
 174:Drivers/Oled/Src/oled_driver.c **** 
 175:Drivers/Oled/Src/oled_driver.c ****     // Render GRAM: 0xA4 - render, 0xA5 - black screen
 176:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xA4);
 177:Drivers/Oled/Src/oled_driver.c **** 
 178:Drivers/Oled/Src/oled_driver.c ****     // Set display offset: 0-63
 179:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xD3);
 180:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x00);
 181:Drivers/Oled/Src/oled_driver.c **** 
 182:Drivers/Oled/Src/oled_driver.c ****     // Set display refresh rate:
 183:Drivers/Oled/Src/oled_driver.c ****     // 7-4 bits set osc freq, 0-3 sets resfresh ratio
 184:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xD5);
 185:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xF0);
 186:Drivers/Oled/Src/oled_driver.c **** 
 187:Drivers/Oled/Src/oled_driver.c ****     // Set flipping config
 188:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xDA);
 189:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x12);
 190:Drivers/Oled/Src/oled_driver.c **** 
 191:Drivers/Oled/Src/oled_driver.c ****     // Enable charge pump
 192:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x8D);
 193:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x14);
 194:Drivers/Oled/Src/oled_driver.c **** 
 195:Drivers/Oled/Src/oled_driver.c ****     // Turn on display
 196:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xAF);
 197:Drivers/Oled/Src/oled_driver.c **** 
 198:Drivers/Oled/Src/oled_driver.c ****     oled_clr(clBlack);
 199:Drivers/Oled/Src/oled_driver.c ****     oled_update();
 200:Drivers/Oled/Src/oled_driver.c ****     return;
 201:Drivers/Oled/Src/oled_driver.c **** }
 202:Drivers/Oled/Src/oled_driver.c **** 
 203:Drivers/Oled/Src/oled_driver.c **** void oled_set_pix(uint8_t x, uint8_t y, enum color_t color)
ARM GAS  /tmp/ccr1UdHJ.s 			page 50


 204:Drivers/Oled/Src/oled_driver.c **** {
 205:Drivers/Oled/Src/oled_driver.c ****     if (x >= GMEM_WIDTH || y >= GMEM_HEIGHT)
 206:Drivers/Oled/Src/oled_driver.c ****         return;
 207:Drivers/Oled/Src/oled_driver.c **** 
 208:Drivers/Oled/Src/oled_driver.c ****     if (color != clBlack)
 209:Drivers/Oled/Src/oled_driver.c ****         gmem[GMEM_WIDTH * (y / 8) + x] |= 1 << (y % 8);
 210:Drivers/Oled/Src/oled_driver.c ****     else
 211:Drivers/Oled/Src/oled_driver.c ****         gmem[GMEM_WIDTH * (y / 8) + x] &= ~(1 << (y % 8));
 212:Drivers/Oled/Src/oled_driver.c ****     return;
 213:Drivers/Oled/Src/oled_driver.c **** }
 214:Drivers/Oled/Src/oled_driver.c **** 
 215:Drivers/Oled/Src/oled_driver.c **** void oled_set_cursor(uint8_t x, uint8_t y)
 216:Drivers/Oled/Src/oled_driver.c **** {
 217:Drivers/Oled/Src/oled_driver.c ****     curX = x;
 218:Drivers/Oled/Src/oled_driver.c ****     curY = y;
 219:Drivers/Oled/Src/oled_driver.c ****     return;
 220:Drivers/Oled/Src/oled_driver.c **** }
 221:Drivers/Oled/Src/oled_driver.c **** 
 222:Drivers/Oled/Src/oled_driver.c **** void oled_putc(char ch)
 223:Drivers/Oled/Src/oled_driver.c **** {
 224:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
 225:Drivers/Oled/Src/oled_driver.c ****     uint8_t color;
 226:Drivers/Oled/Src/oled_driver.c **** 
 227:Drivers/Oled/Src/oled_driver.c ****     /*
 228:Drivers/Oled/Src/oled_driver.c ****      * NOTE: historically \r and \n are used together
 229:Drivers/Oled/Src/oled_driver.c ****      * in many instances as \r is used to move the carriage back
 230:Drivers/Oled/Src/oled_driver.c ****      * to the left side of terminal, \n moves the carriage down
 231:Drivers/Oled/Src/oled_driver.c ****      * Thereby, we must implement both of them
 232:Drivers/Oled/Src/oled_driver.c ****      */
 233:Drivers/Oled/Src/oled_driver.c ****     if (ch == '\n') {
 234:Drivers/Oled/Src/oled_driver.c ****         curY++;
 235:Drivers/Oled/Src/oled_driver.c ****         return;
 236:Drivers/Oled/Src/oled_driver.c ****     }
 237:Drivers/Oled/Src/oled_driver.c **** 
 238:Drivers/Oled/Src/oled_driver.c ****     if (ch == '\r') {
 239:Drivers/Oled/Src/oled_driver.c ****         curX = 0;
 240:Drivers/Oled/Src/oled_driver.c ****         return;
 241:Drivers/Oled/Src/oled_driver.c ****     }
 242:Drivers/Oled/Src/oled_driver.c **** 
 243:Drivers/Oled/Src/oled_driver.c ****     for (j = 0; j < font_desc.height; j++) {
 244:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 245:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 246:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(curX * (font_desc.width + 1) + i,
 247:Drivers/Oled/Src/oled_driver.c ****                          curY * (font_desc.height + 2) + j, color);
 248:Drivers/Oled/Src/oled_driver.c ****         }
 249:Drivers/Oled/Src/oled_driver.c ****     }
 250:Drivers/Oled/Src/oled_driver.c ****     curX++;
 251:Drivers/Oled/Src/oled_driver.c ****     return;
 252:Drivers/Oled/Src/oled_driver.c **** }
 253:Drivers/Oled/Src/oled_driver.c **** 
 254:Drivers/Oled/Src/oled_driver.c **** /*
 255:Drivers/Oled/Src/oled_driver.c ****  * Additional functionality
 256:Drivers/Oled/Src/oled_driver.c ****  */
 257:Drivers/Oled/Src/oled_driver.c **** 
 258:Drivers/Oled/Src/oled_driver.c **** void oled_pic(const uint8_t *im, uint8_t thrsh)
 259:Drivers/Oled/Src/oled_driver.c **** {
 260:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
ARM GAS  /tmp/ccr1UdHJ.s 			page 51


 261:Drivers/Oled/Src/oled_driver.c **** 
 262:Drivers/Oled/Src/oled_driver.c ****     /*
 263:Drivers/Oled/Src/oled_driver.c ****      * Render picture from im array:
 264:Drivers/Oled/Src/oled_driver.c ****      * if value is above thrsh then it is white
 265:Drivers/Oled/Src/oled_driver.c ****      * otherwise it is black
 266:Drivers/Oled/Src/oled_driver.c ****      */
 267:Drivers/Oled/Src/oled_driver.c ****     for (j = 0; j < GMEM_HEIGHT; j++) {
 268:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 269:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 270:Drivers/Oled/Src/oled_driver.c ****         }
 271:Drivers/Oled/Src/oled_driver.c ****     }
 272:Drivers/Oled/Src/oled_driver.c ****     return;
 273:Drivers/Oled/Src/oled_driver.c **** }
 274:Drivers/Oled/Src/oled_driver.c **** 
 275:Drivers/Oled/Src/oled_driver.c **** /*
 276:Drivers/Oled/Src/oled_driver.c ****  * Set of helper functons to mitigate work
 277:Drivers/Oled/Src/oled_driver.c ****  * with image buffer
 278:Drivers/Oled/Src/oled_driver.c ****  */
 279:Drivers/Oled/Src/oled_driver.c **** static void set_bpix(uint8_t *buf, int16_t x, int16_t y, int16_t val)
 280:Drivers/Oled/Src/oled_driver.c **** {
 317              		.loc 1 280 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              		.loc 1 280 1 is_stmt 0 view .LVU87
 322 0000 10B5     		push	{r4, lr}
 323              	.LCFI1:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 4, -8
 326              		.cfi_offset 14, -4
 281:Drivers/Oled/Src/oled_driver.c ****     if ((x < 0 || x >= GMEM_WIDTH) ||
 327              		.loc 1 281 5 is_stmt 1 view .LVU88
 328              		.loc 1 281 16 is_stmt 0 view .LVU89
 329 0002 8CB2     		uxth	r4, r1
 330              		.loc 1 281 8 view .LVU90
 331 0004 7F2C     		cmp	r4, #127
 332 0006 0FD8     		bhi	.L15
 282:Drivers/Oled/Src/oled_driver.c ****         (y < 0 || y >= GMEM_HEIGHT))
 333              		.loc 1 282 16 discriminator 1 view .LVU91
 334 0008 94B2     		uxth	r4, r2
 281:Drivers/Oled/Src/oled_driver.c ****     if ((x < 0 || x >= GMEM_WIDTH) ||
 335              		.loc 1 281 36 discriminator 1 view .LVU92
 336 000a 3F2C     		cmp	r4, #63
 337 000c 0CD8     		bhi	.L15
 283:Drivers/Oled/Src/oled_driver.c ****         return;
 284:Drivers/Oled/Src/oled_driver.c ****     buf[y * GMEM_WIDTH + x] = val > 0xFF ? 0xFF : val < 0 ? 0 : val;
 338              		.loc 1 284 5 is_stmt 1 view .LVU93
 339              		.loc 1 284 29 is_stmt 0 view .LVU94
 340 000e FF2B     		cmp	r3, #255
 341 0010 06DC     		bgt	.L19
 342              		.loc 1 284 63 discriminator 1 view .LVU95
 343 0012 1C1C     		adds	r4, r3, #0
 344 0014 002B     		cmp	r3, #0
 345 0016 01DB     		blt	.L20
 346              	.L18:
 347              		.loc 1 284 29 discriminator 1 view .LVU96
 348 0018 E4B2     		uxtb	r4, r4
ARM GAS  /tmp/ccr1UdHJ.s 			page 52


 349 001a 02E0     		b	.L17
 350              	.L20:
 351              		.loc 1 284 63 discriminator 1 view .LVU97
 352 001c 0024     		movs	r4, #0
 353 001e FBE7     		b	.L18
 354              	.L19:
 355              		.loc 1 284 29 view .LVU98
 356 0020 FF24     		movs	r4, #255
 357              	.L17:
 358              		.loc 1 284 11 discriminator 4 view .LVU99
 359 0022 D201     		lsls	r2, r2, #7
 360              	.LVL24:
 361              		.loc 1 284 24 discriminator 4 view .LVU100
 362 0024 8918     		adds	r1, r1, r2
 363              	.LVL25:
 364              		.loc 1 284 29 discriminator 4 view .LVU101
 365 0026 4454     		strb	r4, [r0, r1]
 285:Drivers/Oled/Src/oled_driver.c ****     return;
 366              		.loc 1 285 5 is_stmt 1 discriminator 4 view .LVU102
 367              	.L15:
 286:Drivers/Oled/Src/oled_driver.c **** }
 368              		.loc 1 286 1 is_stmt 0 view .LVU103
 369              		@ sp needed
 370 0028 10BD     		pop	{r4, pc}
 371              		.cfi_endproc
 372              	.LFE350:
 374              		.section	.text.get_bpix,"ax",%progbits
 375              		.align	1
 376              		.syntax unified
 377              		.code	16
 378              		.thumb_func
 380              	get_bpix:
 381              	.LVL26:
 382              	.LFB351:
 287:Drivers/Oled/Src/oled_driver.c **** 
 288:Drivers/Oled/Src/oled_driver.c **** static int16_t get_bpix(uint8_t *buf, int16_t x, int16_t y)
 289:Drivers/Oled/Src/oled_driver.c **** {
 383              		.loc 1 289 1 is_stmt 1 view -0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 290:Drivers/Oled/Src/oled_driver.c ****     if ((x < 0 || x >= GMEM_WIDTH) ||
 388              		.loc 1 290 5 view .LVU105
 389              		.loc 1 290 16 is_stmt 0 view .LVU106
 390 0000 8BB2     		uxth	r3, r1
 391              		.loc 1 290 8 view .LVU107
 392 0002 7F2B     		cmp	r3, #127
 393 0004 06D8     		bhi	.L23
 291:Drivers/Oled/Src/oled_driver.c ****         (y < 0 || y >= GMEM_HEIGHT))
 394              		.loc 1 291 16 discriminator 1 view .LVU108
 395 0006 93B2     		uxth	r3, r2
 290:Drivers/Oled/Src/oled_driver.c ****     if ((x < 0 || x >= GMEM_WIDTH) ||
 396              		.loc 1 290 36 discriminator 1 view .LVU109
 397 0008 3F2B     		cmp	r3, #63
 398 000a 05D8     		bhi	.L24
 292:Drivers/Oled/Src/oled_driver.c ****         return 0;
ARM GAS  /tmp/ccr1UdHJ.s 			page 53


 293:Drivers/Oled/Src/oled_driver.c ****     return buf[y * GMEM_WIDTH + x];
 399              		.loc 1 293 5 is_stmt 1 view .LVU110
 400              		.loc 1 293 18 is_stmt 0 view .LVU111
 401 000c D201     		lsls	r2, r2, #7
 402              	.LVL27:
 403              		.loc 1 293 31 view .LVU112
 404 000e 8918     		adds	r1, r1, r2
 405              	.LVL28:
 406              		.loc 1 293 15 view .LVU113
 407 0010 405C     		ldrb	r0, [r0, r1]
 408              	.LVL29:
 409              	.L22:
 294:Drivers/Oled/Src/oled_driver.c **** }
 410              		.loc 1 294 1 view .LVU114
 411              		@ sp needed
 412 0012 7047     		bx	lr
 413              	.LVL30:
 414              	.L23:
 292:Drivers/Oled/Src/oled_driver.c ****         return 0;
 415              		.loc 1 292 16 view .LVU115
 416 0014 0020     		movs	r0, #0
 417              	.LVL31:
 292:Drivers/Oled/Src/oled_driver.c ****         return 0;
 418              		.loc 1 292 16 view .LVU116
 419 0016 FCE7     		b	.L22
 420              	.LVL32:
 421              	.L24:
 292:Drivers/Oled/Src/oled_driver.c ****         return 0;
 422              		.loc 1 292 16 view .LVU117
 423 0018 0020     		movs	r0, #0
 424              	.LVL33:
 292:Drivers/Oled/Src/oled_driver.c ****         return 0;
 425              		.loc 1 292 16 view .LVU118
 426 001a FAE7     		b	.L22
 427              		.cfi_endproc
 428              	.LFE351:
 430              		.section	.text.oled_clr,"ax",%progbits
 431              		.align	1
 432              		.global	oled_clr
 433              		.syntax unified
 434              		.code	16
 435              		.thumb_func
 437              	oled_clr:
 438              	.LVL34:
 439              	.LFB343:
 117:Drivers/Oled/Src/oled_driver.c ****     memset(gmem, color, GMEM_SIZE);
 440              		.loc 1 117 1 is_stmt 1 view -0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 117:Drivers/Oled/Src/oled_driver.c ****     memset(gmem, color, GMEM_SIZE);
 444              		.loc 1 117 1 is_stmt 0 view .LVU120
 445 0000 10B5     		push	{r4, lr}
 446              	.LCFI2:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 4, -8
 449              		.cfi_offset 14, -4
ARM GAS  /tmp/ccr1UdHJ.s 			page 54


 450 0002 0100     		movs	r1, r0
 118:Drivers/Oled/Src/oled_driver.c ****     return;
 451              		.loc 1 118 5 is_stmt 1 view .LVU121
 452 0004 8022     		movs	r2, #128
 453 0006 D200     		lsls	r2, r2, #3
 454 0008 0148     		ldr	r0, .L26
 455              	.LVL35:
 118:Drivers/Oled/Src/oled_driver.c ****     return;
 456              		.loc 1 118 5 is_stmt 0 view .LVU122
 457 000a FFF7FEFF 		bl	memset
 458              	.LVL36:
 119:Drivers/Oled/Src/oled_driver.c **** }
 459              		.loc 1 119 5 is_stmt 1 view .LVU123
 120:Drivers/Oled/Src/oled_driver.c **** 
 460              		.loc 1 120 1 is_stmt 0 view .LVU124
 461              		@ sp needed
 462 000e 10BD     		pop	{r4, pc}
 463              	.L27:
 464              		.align	2
 465              	.L26:
 466 0010 00000000 		.word	gmem
 467              		.cfi_endproc
 468              	.LFE343:
 470              		.section	.text.oled_update,"ax",%progbits
 471              		.align	1
 472              		.global	oled_update
 473              		.syntax unified
 474              		.code	16
 475              		.thumb_func
 477              	oled_update:
 478              	.LFB344:
 123:Drivers/Oled/Src/oled_driver.c ****     uint8_t i;
 479              		.loc 1 123 1 is_stmt 1 view -0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483 0000 10B5     		push	{r4, lr}
 484              	.LCFI3:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 4, -8
 487              		.cfi_offset 14, -4
 124:Drivers/Oled/Src/oled_driver.c **** 
 488              		.loc 1 124 5 view .LVU126
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 489              		.loc 1 126 5 view .LVU127
 490              	.LVL37:
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 491              		.loc 1 126 12 is_stmt 0 view .LVU128
 492 0002 0024     		movs	r4, #0
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 493              		.loc 1 126 5 view .LVU129
 494 0004 12E0     		b	.L29
 495              	.LVL38:
 496              	.L30:
 128:Drivers/Oled/Src/oled_driver.c ****         // Set lower column number
 497              		.loc 1 128 9 is_stmt 1 discriminator 3 view .LVU130
 498 0006 2000     		movs	r0, r4
ARM GAS  /tmp/ccr1UdHJ.s 			page 55


 499 0008 5038     		subs	r0, r0, #80
 500 000a C0B2     		uxtb	r0, r0
 501 000c FFF7FEFF 		bl	oled_cmd_send
 502              	.LVL39:
 130:Drivers/Oled/Src/oled_driver.c ****         // Set higher column number
 503              		.loc 1 130 9 discriminator 3 view .LVU131
 504 0010 0020     		movs	r0, #0
 505 0012 FFF7FEFF 		bl	oled_cmd_send
 506              	.LVL40:
 132:Drivers/Oled/Src/oled_driver.c ****         // Send 128 pixels
 507              		.loc 1 132 9 discriminator 3 view .LVU132
 508 0016 1020     		movs	r0, #16
 509 0018 FFF7FEFF 		bl	oled_cmd_send
 510              	.LVL41:
 134:Drivers/Oled/Src/oled_driver.c ****     }
 511              		.loc 1 134 9 discriminator 3 view .LVU133
 134:Drivers/Oled/Src/oled_driver.c ****     }
 512              		.loc 1 134 41 is_stmt 0 discriminator 3 view .LVU134
 513 001c E001     		lsls	r0, r4, #7
 134:Drivers/Oled/Src/oled_driver.c ****     }
 514              		.loc 1 134 9 discriminator 3 view .LVU135
 515 001e 054B     		ldr	r3, .L31
 516 0020 C018     		adds	r0, r0, r3
 517 0022 8021     		movs	r1, #128
 518 0024 FFF7FEFF 		bl	oled_data_send
 519              	.LVL42:
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 520              		.loc 1 126 24 is_stmt 1 discriminator 3 view .LVU136
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 521              		.loc 1 126 25 is_stmt 0 discriminator 3 view .LVU137
 522 0028 0134     		adds	r4, r4, #1
 523              	.LVL43:
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 524              		.loc 1 126 25 discriminator 3 view .LVU138
 525 002a E4B2     		uxtb	r4, r4
 526              	.LVL44:
 527              	.L29:
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 528              		.loc 1 126 17 is_stmt 1 discriminator 1 view .LVU139
 126:Drivers/Oled/Src/oled_driver.c ****         // Set page start address (number of vertical byte)
 529              		.loc 1 126 5 is_stmt 0 discriminator 1 view .LVU140
 530 002c 072C     		cmp	r4, #7
 531 002e EAD9     		bls	.L30
 136:Drivers/Oled/Src/oled_driver.c **** 
 532              		.loc 1 136 1 view .LVU141
 533              		@ sp needed
 534              	.LVL45:
 136:Drivers/Oled/Src/oled_driver.c **** 
 535              		.loc 1 136 1 view .LVU142
 536 0030 10BD     		pop	{r4, pc}
 537              	.L32:
 538 0032 C046     		.align	2
 539              	.L31:
 540 0034 00000000 		.word	gmem
 541              		.cfi_endproc
 542              	.LFE344:
 544              		.section	.text.oled_config,"ax",%progbits
ARM GAS  /tmp/ccr1UdHJ.s 			page 56


 545              		.align	1
 546              		.global	oled_config
 547              		.syntax unified
 548              		.code	16
 549              		.thumb_func
 551              	oled_config:
 552              	.LFB345:
 139:Drivers/Oled/Src/oled_driver.c ****     uint32_t delay = 2000000;
 553              		.loc 1 139 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557 0000 10B5     		push	{r4, lr}
 558              	.LCFI4:
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 4, -8
 561              		.cfi_offset 14, -4
 140:Drivers/Oled/Src/oled_driver.c ****     // Config hardware
 562              		.loc 1 140 5 view .LVU144
 563              	.LVL46:
 145:Drivers/Oled/Src/oled_driver.c **** 
 564              		.loc 1 145 5 view .LVU145
 140:Drivers/Oled/Src/oled_driver.c ****     // Config hardware
 565              		.loc 1 140 14 is_stmt 0 view .LVU146
 566 0002 254B     		ldr	r3, .L35
 567              	.LVL47:
 568              	.L34:
 145:Drivers/Oled/Src/oled_driver.c **** 
 569              		.loc 1 145 20 is_stmt 1 discriminator 1 view .LVU147
 145:Drivers/Oled/Src/oled_driver.c **** 
 570              		.loc 1 145 11 discriminator 1 view .LVU148
 571 0004 1A00     		movs	r2, r3
 145:Drivers/Oled/Src/oled_driver.c **** 
 572              		.loc 1 145 17 is_stmt 0 discriminator 1 view .LVU149
 573 0006 013B     		subs	r3, r3, #1
 574              	.LVL48:
 145:Drivers/Oled/Src/oled_driver.c **** 
 575              		.loc 1 145 11 discriminator 1 view .LVU150
 576 0008 002A     		cmp	r2, #0
 577 000a FBD1     		bne	.L34
 148:Drivers/Oled/Src/oled_driver.c **** 
 578              		.loc 1 148 5 is_stmt 1 view .LVU151
 579 000c AE20     		movs	r0, #174
 580 000e FFF7FEFF 		bl	oled_cmd_send
 581              	.LVL49:
 152:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x10);
 582              		.loc 1 152 5 view .LVU152
 583 0012 2020     		movs	r0, #32
 584 0014 FFF7FEFF 		bl	oled_cmd_send
 585              	.LVL50:
 153:Drivers/Oled/Src/oled_driver.c **** 
 586              		.loc 1 153 5 view .LVU153
 587 0018 1020     		movs	r0, #16
 588 001a FFF7FEFF 		bl	oled_cmd_send
 589              	.LVL51:
 156:Drivers/Oled/Src/oled_driver.c **** 
 590              		.loc 1 156 5 view .LVU154
ARM GAS  /tmp/ccr1UdHJ.s 			page 57


 591 001e C820     		movs	r0, #200
 592 0020 FFF7FEFF 		bl	oled_cmd_send
 593              	.LVL52:
 159:Drivers/Oled/Src/oled_driver.c **** 
 594              		.loc 1 159 5 view .LVU155
 595 0024 4020     		movs	r0, #64
 596 0026 FFF7FEFF 		bl	oled_cmd_send
 597              	.LVL53:
 162:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xFF);
 598              		.loc 1 162 5 view .LVU156
 599 002a 8120     		movs	r0, #129
 600 002c FFF7FEFF 		bl	oled_cmd_send
 601              	.LVL54:
 163:Drivers/Oled/Src/oled_driver.c **** 
 602              		.loc 1 163 5 view .LVU157
 603 0030 FF20     		movs	r0, #255
 604 0032 FFF7FEFF 		bl	oled_cmd_send
 605              	.LVL55:
 166:Drivers/Oled/Src/oled_driver.c **** 
 606              		.loc 1 166 5 view .LVU158
 607 0036 A120     		movs	r0, #161
 608 0038 FFF7FEFF 		bl	oled_cmd_send
 609              	.LVL56:
 169:Drivers/Oled/Src/oled_driver.c **** 
 610              		.loc 1 169 5 view .LVU159
 611 003c A620     		movs	r0, #166
 612 003e FFF7FEFF 		bl	oled_cmd_send
 613              	.LVL57:
 172:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x3F);
 614              		.loc 1 172 5 view .LVU160
 615 0042 A820     		movs	r0, #168
 616 0044 FFF7FEFF 		bl	oled_cmd_send
 617              	.LVL58:
 173:Drivers/Oled/Src/oled_driver.c **** 
 618              		.loc 1 173 5 view .LVU161
 619 0048 3F20     		movs	r0, #63
 620 004a FFF7FEFF 		bl	oled_cmd_send
 621              	.LVL59:
 176:Drivers/Oled/Src/oled_driver.c **** 
 622              		.loc 1 176 5 view .LVU162
 623 004e A420     		movs	r0, #164
 624 0050 FFF7FEFF 		bl	oled_cmd_send
 625              	.LVL60:
 179:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x00);
 626              		.loc 1 179 5 view .LVU163
 627 0054 D320     		movs	r0, #211
 628 0056 FFF7FEFF 		bl	oled_cmd_send
 629              	.LVL61:
 180:Drivers/Oled/Src/oled_driver.c **** 
 630              		.loc 1 180 5 view .LVU164
 631 005a 0020     		movs	r0, #0
 632 005c FFF7FEFF 		bl	oled_cmd_send
 633              	.LVL62:
 184:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0xF0);
 634              		.loc 1 184 5 view .LVU165
 635 0060 D520     		movs	r0, #213
 636 0062 FFF7FEFF 		bl	oled_cmd_send
ARM GAS  /tmp/ccr1UdHJ.s 			page 58


 637              	.LVL63:
 185:Drivers/Oled/Src/oled_driver.c **** 
 638              		.loc 1 185 5 view .LVU166
 639 0066 F020     		movs	r0, #240
 640 0068 FFF7FEFF 		bl	oled_cmd_send
 641              	.LVL64:
 188:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x12);
 642              		.loc 1 188 5 view .LVU167
 643 006c DA20     		movs	r0, #218
 644 006e FFF7FEFF 		bl	oled_cmd_send
 645              	.LVL65:
 189:Drivers/Oled/Src/oled_driver.c **** 
 646              		.loc 1 189 5 view .LVU168
 647 0072 1220     		movs	r0, #18
 648 0074 FFF7FEFF 		bl	oled_cmd_send
 649              	.LVL66:
 192:Drivers/Oled/Src/oled_driver.c ****     oled_cmd_send(0x14);
 650              		.loc 1 192 5 view .LVU169
 651 0078 8D20     		movs	r0, #141
 652 007a FFF7FEFF 		bl	oled_cmd_send
 653              	.LVL67:
 193:Drivers/Oled/Src/oled_driver.c **** 
 654              		.loc 1 193 5 view .LVU170
 655 007e 1420     		movs	r0, #20
 656 0080 FFF7FEFF 		bl	oled_cmd_send
 657              	.LVL68:
 196:Drivers/Oled/Src/oled_driver.c **** 
 658              		.loc 1 196 5 view .LVU171
 659 0084 AF20     		movs	r0, #175
 660 0086 FFF7FEFF 		bl	oled_cmd_send
 661              	.LVL69:
 198:Drivers/Oled/Src/oled_driver.c ****     oled_update();
 662              		.loc 1 198 5 view .LVU172
 663 008a 0020     		movs	r0, #0
 664 008c FFF7FEFF 		bl	oled_clr
 665              	.LVL70:
 199:Drivers/Oled/Src/oled_driver.c ****     return;
 666              		.loc 1 199 5 view .LVU173
 667 0090 FFF7FEFF 		bl	oled_update
 668              	.LVL71:
 200:Drivers/Oled/Src/oled_driver.c **** }
 669              		.loc 1 200 5 view .LVU174
 201:Drivers/Oled/Src/oled_driver.c **** 
 670              		.loc 1 201 1 is_stmt 0 view .LVU175
 671              		@ sp needed
 672 0094 10BD     		pop	{r4, pc}
 673              	.L36:
 674 0096 C046     		.align	2
 675              	.L35:
 676 0098 80841E00 		.word	2000000
 677              		.cfi_endproc
 678              	.LFE345:
 680              		.section	.text.oled_set_pix,"ax",%progbits
 681              		.align	1
 682              		.global	oled_set_pix
 683              		.syntax unified
 684              		.code	16
ARM GAS  /tmp/ccr1UdHJ.s 			page 59


 685              		.thumb_func
 687              	oled_set_pix:
 688              	.LVL72:
 689              	.LFB346:
 204:Drivers/Oled/Src/oled_driver.c ****     if (x >= GMEM_WIDTH || y >= GMEM_HEIGHT)
 690              		.loc 1 204 1 is_stmt 1 view -0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 205:Drivers/Oled/Src/oled_driver.c ****         return;
 695              		.loc 1 205 5 view .LVU177
 205:Drivers/Oled/Src/oled_driver.c ****         return;
 696              		.loc 1 205 11 is_stmt 0 view .LVU178
 697 0000 43B2     		sxtb	r3, r0
 205:Drivers/Oled/Src/oled_driver.c ****         return;
 698              		.loc 1 205 8 view .LVU179
 699 0002 002B     		cmp	r3, #0
 700 0004 0EDB     		blt	.L37
 205:Drivers/Oled/Src/oled_driver.c ****         return;
 701              		.loc 1 205 25 discriminator 1 view .LVU180
 702 0006 3F29     		cmp	r1, #63
 703 0008 0CD8     		bhi	.L37
 208:Drivers/Oled/Src/oled_driver.c ****         gmem[GMEM_WIDTH * (y / 8) + x] |= 1 << (y % 8);
 704              		.loc 1 208 5 is_stmt 1 view .LVU181
 208:Drivers/Oled/Src/oled_driver.c ****         gmem[GMEM_WIDTH * (y / 8) + x] |= 1 << (y % 8);
 705              		.loc 1 208 8 is_stmt 0 view .LVU182
 706 000a 002A     		cmp	r2, #0
 707 000c 0BD0     		beq	.L39
 209:Drivers/Oled/Src/oled_driver.c ****     else
 708              		.loc 1 209 9 is_stmt 1 view .LVU183
 209:Drivers/Oled/Src/oled_driver.c ****     else
 709              		.loc 1 209 40 is_stmt 0 view .LVU184
 710 000e CB08     		lsrs	r3, r1, #3
 711 0010 DB01     		lsls	r3, r3, #7
 712 0012 1818     		adds	r0, r3, r0
 713              	.LVL73:
 209:Drivers/Oled/Src/oled_driver.c ****     else
 714              		.loc 1 209 51 view .LVU185
 715 0014 0723     		movs	r3, #7
 716 0016 1940     		ands	r1, r3
 717              	.LVL74:
 209:Drivers/Oled/Src/oled_driver.c ****     else
 718              		.loc 1 209 45 view .LVU186
 719 0018 0122     		movs	r2, #1
 720              	.LVL75:
 209:Drivers/Oled/Src/oled_driver.c ****     else
 721              		.loc 1 209 45 view .LVU187
 722 001a 8A40     		lsls	r2, r2, r1
 209:Drivers/Oled/Src/oled_driver.c ****     else
 723              		.loc 1 209 40 view .LVU188
 724 001c 0849     		ldr	r1, .L40
 725 001e 0B5C     		ldrb	r3, [r1, r0]
 726 0020 1343     		orrs	r3, r2
 727 0022 0B54     		strb	r3, [r1, r0]
 728              	.L37:
 213:Drivers/Oled/Src/oled_driver.c **** 
ARM GAS  /tmp/ccr1UdHJ.s 			page 60


 729              		.loc 1 213 1 view .LVU189
 730              		@ sp needed
 731 0024 7047     		bx	lr
 732              	.LVL76:
 733              	.L39:
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 734              		.loc 1 211 9 is_stmt 1 view .LVU190
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 735              		.loc 1 211 40 is_stmt 0 view .LVU191
 736 0026 CB08     		lsrs	r3, r1, #3
 737 0028 DB01     		lsls	r3, r3, #7
 738 002a 1818     		adds	r0, r3, r0
 739              	.LVL77:
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 740              		.loc 1 211 53 view .LVU192
 741 002c 0723     		movs	r3, #7
 742 002e 1940     		ands	r1, r3
 743              	.LVL78:
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 744              		.loc 1 211 47 view .LVU193
 745 0030 0122     		movs	r2, #1
 746              	.LVL79:
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 747              		.loc 1 211 47 view .LVU194
 748 0032 8A40     		lsls	r2, r2, r1
 211:Drivers/Oled/Src/oled_driver.c ****     return;
 749              		.loc 1 211 40 view .LVU195
 750 0034 0249     		ldr	r1, .L40
 751 0036 0B5C     		ldrb	r3, [r1, r0]
 752 0038 9343     		bics	r3, r2
 753 003a 0B54     		strb	r3, [r1, r0]
 754 003c F2E7     		b	.L37
 755              	.L41:
 756 003e C046     		.align	2
 757              	.L40:
 758 0040 00000000 		.word	gmem
 759              		.cfi_endproc
 760              	.LFE346:
 762              		.section	.text.oled_set_cursor,"ax",%progbits
 763              		.align	1
 764              		.global	oled_set_cursor
 765              		.syntax unified
 766              		.code	16
 767              		.thumb_func
 769              	oled_set_cursor:
 770              	.LVL80:
 771              	.LFB347:
 216:Drivers/Oled/Src/oled_driver.c ****     curX = x;
 772              		.loc 1 216 1 is_stmt 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 217:Drivers/Oled/Src/oled_driver.c ****     curY = y;
 777              		.loc 1 217 5 view .LVU197
 217:Drivers/Oled/Src/oled_driver.c ****     curY = y;
 778              		.loc 1 217 10 is_stmt 0 view .LVU198
ARM GAS  /tmp/ccr1UdHJ.s 			page 61


 779 0000 024B     		ldr	r3, .L43
 780 0002 1870     		strb	r0, [r3]
 218:Drivers/Oled/Src/oled_driver.c ****     return;
 781              		.loc 1 218 5 is_stmt 1 view .LVU199
 218:Drivers/Oled/Src/oled_driver.c ****     return;
 782              		.loc 1 218 10 is_stmt 0 view .LVU200
 783 0004 024B     		ldr	r3, .L43+4
 784 0006 1970     		strb	r1, [r3]
 219:Drivers/Oled/Src/oled_driver.c **** }
 785              		.loc 1 219 5 is_stmt 1 view .LVU201
 220:Drivers/Oled/Src/oled_driver.c **** 
 786              		.loc 1 220 1 is_stmt 0 view .LVU202
 787              		@ sp needed
 788 0008 7047     		bx	lr
 789              	.L44:
 790 000a C046     		.align	2
 791              	.L43:
 792 000c 00000000 		.word	.LANCHOR0
 793 0010 00000000 		.word	.LANCHOR1
 794              		.cfi_endproc
 795              	.LFE347:
 797              		.section	.text.oled_putc,"ax",%progbits
 798              		.align	1
 799              		.global	oled_putc
 800              		.syntax unified
 801              		.code	16
 802              		.thumb_func
 804              	oled_putc:
 805              	.LVL81:
 806              	.LFB348:
 223:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
 807              		.loc 1 223 1 is_stmt 1 view -0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 223:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
 811              		.loc 1 223 1 is_stmt 0 view .LVU204
 812 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 813              	.LCFI5:
 814              		.cfi_def_cfa_offset 24
 815              		.cfi_offset 3, -24
 816              		.cfi_offset 4, -20
 817              		.cfi_offset 5, -16
 818              		.cfi_offset 6, -12
 819              		.cfi_offset 7, -8
 820              		.cfi_offset 14, -4
 821 0002 0600     		movs	r6, r0
 224:Drivers/Oled/Src/oled_driver.c ****     uint8_t color;
 822              		.loc 1 224 5 is_stmt 1 view .LVU205
 225:Drivers/Oled/Src/oled_driver.c **** 
 823              		.loc 1 225 5 view .LVU206
 233:Drivers/Oled/Src/oled_driver.c ****         curY++;
 824              		.loc 1 233 5 view .LVU207
 233:Drivers/Oled/Src/oled_driver.c ****         curY++;
 825              		.loc 1 233 8 is_stmt 0 view .LVU208
 826 0004 0A28     		cmp	r0, #10
 827 0006 03D0     		beq	.L53
ARM GAS  /tmp/ccr1UdHJ.s 			page 62


 238:Drivers/Oled/Src/oled_driver.c ****         curX = 0;
 828              		.loc 1 238 5 is_stmt 1 view .LVU209
 238:Drivers/Oled/Src/oled_driver.c ****         curX = 0;
 829              		.loc 1 238 8 is_stmt 0 view .LVU210
 830 0008 0D28     		cmp	r0, #13
 831 000a 06D0     		beq	.L54
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 832              		.loc 1 243 12 view .LVU211
 833 000c 0025     		movs	r5, #0
 834 000e 27E0     		b	.L48
 835              	.L53:
 234:Drivers/Oled/Src/oled_driver.c ****         return;
 836              		.loc 1 234 9 is_stmt 1 view .LVU212
 234:Drivers/Oled/Src/oled_driver.c ****         return;
 837              		.loc 1 234 13 is_stmt 0 view .LVU213
 838 0010 194A     		ldr	r2, .L56
 839 0012 1378     		ldrb	r3, [r2]
 840 0014 0133     		adds	r3, r3, #1
 841 0016 1370     		strb	r3, [r2]
 235:Drivers/Oled/Src/oled_driver.c ****     }
 842              		.loc 1 235 9 is_stmt 1 view .LVU214
 843 0018 2CE0     		b	.L45
 844              	.L54:
 239:Drivers/Oled/Src/oled_driver.c ****         return;
 845              		.loc 1 239 9 view .LVU215
 239:Drivers/Oled/Src/oled_driver.c ****         return;
 846              		.loc 1 239 14 is_stmt 0 view .LVU216
 847 001a 184B     		ldr	r3, .L56+4
 848 001c 0022     		movs	r2, #0
 849 001e 1A70     		strb	r2, [r3]
 240:Drivers/Oled/Src/oled_driver.c ****     }
 850              		.loc 1 240 9 is_stmt 1 view .LVU217
 851 0020 28E0     		b	.L45
 852              	.LVL82:
 853              	.L49:
 245:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(curX * (font_desc.width + 1) + i,
 854              		.loc 1 245 13 discriminator 3 view .LVU218
 245:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(curX * (font_desc.width + 1) + i,
 855              		.loc 1 245 30 is_stmt 0 discriminator 3 view .LVU219
 856 0022 174F     		ldr	r7, .L56+8
 245:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(curX * (font_desc.width + 1) + i,
 857              		.loc 1 245 21 discriminator 3 view .LVU220
 858 0024 2A00     		movs	r2, r5
 859 0026 2100     		movs	r1, r4
 860 0028 3000     		movs	r0, r6
 861 002a BB68     		ldr	r3, [r7, #8]
 862 002c 9847     		blx	r3
 863              	.LVL83:
 864 002e 0200     		movs	r2, r0
 865              	.LVL84:
 246:Drivers/Oled/Src/oled_driver.c ****                          curY * (font_desc.height + 2) + j, color);
 866              		.loc 1 246 13 is_stmt 1 discriminator 3 view .LVU221
 246:Drivers/Oled/Src/oled_driver.c ****                          curY * (font_desc.height + 2) + j, color);
 867              		.loc 1 246 43 is_stmt 0 discriminator 3 view .LVU222
 868 0030 3879     		ldrb	r0, [r7, #4]
 247:Drivers/Oled/Src/oled_driver.c ****         }
 869              		.loc 1 247 43 discriminator 3 view .LVU223
ARM GAS  /tmp/ccr1UdHJ.s 			page 63


 870 0032 7979     		ldrb	r1, [r7, #5]
 246:Drivers/Oled/Src/oled_driver.c ****                          curY * (font_desc.height + 2) + j, color);
 871              		.loc 1 246 13 discriminator 3 view .LVU224
 872 0034 0231     		adds	r1, r1, #2
 873 0036 104B     		ldr	r3, .L56
 874 0038 1B78     		ldrb	r3, [r3]
 875 003a 5943     		muls	r1, r3
 876 003c 6918     		adds	r1, r5, r1
 877 003e C9B2     		uxtb	r1, r1
 878 0040 0130     		adds	r0, r0, #1
 879 0042 0E4B     		ldr	r3, .L56+4
 880 0044 1B78     		ldrb	r3, [r3]
 881 0046 5843     		muls	r0, r3
 882 0048 2018     		adds	r0, r4, r0
 883 004a C0B2     		uxtb	r0, r0
 884 004c FFF7FEFF 		bl	oled_set_pix
 885              	.LVL85:
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 886              		.loc 1 244 42 is_stmt 1 discriminator 3 view .LVU225
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 887              		.loc 1 244 43 is_stmt 0 discriminator 3 view .LVU226
 888 0050 0134     		adds	r4, r4, #1
 889              	.LVL86:
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 890              		.loc 1 244 43 discriminator 3 view .LVU227
 891 0052 E4B2     		uxtb	r4, r4
 892              	.LVL87:
 893              	.L50:
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 894              		.loc 1 244 21 is_stmt 1 discriminator 1 view .LVU228
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 895              		.loc 1 244 34 is_stmt 0 discriminator 1 view .LVU229
 896 0054 0A4B     		ldr	r3, .L56+8
 897 0056 1B79     		ldrb	r3, [r3, #4]
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 898              		.loc 1 244 9 discriminator 1 view .LVU230
 899 0058 A342     		cmp	r3, r4
 900 005a E2D8     		bhi	.L49
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 901              		.loc 1 243 39 is_stmt 1 discriminator 2 view .LVU231
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 902              		.loc 1 243 40 is_stmt 0 discriminator 2 view .LVU232
 903 005c 0135     		adds	r5, r5, #1
 904              	.LVL88:
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 905              		.loc 1 243 40 discriminator 2 view .LVU233
 906 005e EDB2     		uxtb	r5, r5
 907              	.LVL89:
 908              	.L48:
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 909              		.loc 1 243 17 is_stmt 1 discriminator 1 view .LVU234
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 910              		.loc 1 243 30 is_stmt 0 discriminator 1 view .LVU235
 911 0060 074B     		ldr	r3, .L56+8
 912 0062 5B79     		ldrb	r3, [r3, #5]
 243:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < font_desc.width; i++) {
 913              		.loc 1 243 5 discriminator 1 view .LVU236
ARM GAS  /tmp/ccr1UdHJ.s 			page 64


 914 0064 AB42     		cmp	r3, r5
 915 0066 01D9     		bls	.L55
 244:Drivers/Oled/Src/oled_driver.c ****             color = font_desc.get_pix(ch, i, j);
 916              		.loc 1 244 16 view .LVU237
 917 0068 0024     		movs	r4, #0
 918 006a F3E7     		b	.L50
 919              	.L55:
 250:Drivers/Oled/Src/oled_driver.c ****     return;
 920              		.loc 1 250 5 is_stmt 1 view .LVU238
 250:Drivers/Oled/Src/oled_driver.c ****     return;
 921              		.loc 1 250 9 is_stmt 0 view .LVU239
 922 006c 034A     		ldr	r2, .L56+4
 923 006e 1378     		ldrb	r3, [r2]
 924 0070 0133     		adds	r3, r3, #1
 925 0072 1370     		strb	r3, [r2]
 251:Drivers/Oled/Src/oled_driver.c **** }
 926              		.loc 1 251 5 is_stmt 1 view .LVU240
 927              	.LVL90:
 928              	.L45:
 252:Drivers/Oled/Src/oled_driver.c **** 
 929              		.loc 1 252 1 is_stmt 0 view .LVU241
 930              		@ sp needed
 931 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 932              	.L57:
 933 0076 C046     		.align	2
 934              	.L56:
 935 0078 00000000 		.word	.LANCHOR1
 936 007c 00000000 		.word	.LANCHOR0
 937 0080 00000000 		.word	font_desc
 938              		.cfi_endproc
 939              	.LFE348:
 941              		.section	.text.oled_pic,"ax",%progbits
 942              		.align	1
 943              		.global	oled_pic
 944              		.syntax unified
 945              		.code	16
 946              		.thumb_func
 948              	oled_pic:
 949              	.LVL91:
 950              	.LFB349:
 259:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
 951              		.loc 1 259 1 is_stmt 1 view -0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 259:Drivers/Oled/Src/oled_driver.c ****     uint8_t i, j;
 955              		.loc 1 259 1 is_stmt 0 view .LVU243
 956 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 957              	.LCFI6:
 958              		.cfi_def_cfa_offset 24
 959              		.cfi_offset 3, -24
 960              		.cfi_offset 4, -20
 961              		.cfi_offset 5, -16
 962              		.cfi_offset 6, -12
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 0700     		movs	r7, r0
ARM GAS  /tmp/ccr1UdHJ.s 			page 65


 966 0004 0E00     		movs	r6, r1
 260:Drivers/Oled/Src/oled_driver.c **** 
 967              		.loc 1 260 5 is_stmt 1 view .LVU244
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 968              		.loc 1 267 5 view .LVU245
 969              	.LVL92:
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 970              		.loc 1 267 12 is_stmt 0 view .LVU246
 971 0006 0025     		movs	r5, #0
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 972              		.loc 1 267 5 view .LVU247
 973 0008 10E0     		b	.L59
 974              	.LVL93:
 975              	.L60:
 269:Drivers/Oled/Src/oled_driver.c ****         }
 976              		.loc 1 269 13 is_stmt 1 discriminator 3 view .LVU248
 269:Drivers/Oled/Src/oled_driver.c ****         }
 977              		.loc 1 269 37 is_stmt 0 discriminator 3 view .LVU249
 978 000a EB01     		lsls	r3, r5, #7
 269:Drivers/Oled/Src/oled_driver.c ****         }
 979              		.loc 1 269 50 discriminator 3 view .LVU250
 980 000c E318     		adds	r3, r4, r3
 269:Drivers/Oled/Src/oled_driver.c ****         }
 981              		.loc 1 269 34 discriminator 3 view .LVU251
 982 000e FA5C     		ldrb	r2, [r7, r3]
 269:Drivers/Oled/Src/oled_driver.c ****         }
 983              		.loc 1 269 13 discriminator 3 view .LVU252
 984 0010 9642     		cmp	r6, r2
 985 0012 9241     		sbcs	r2, r2, r2
 986 0014 5242     		rsbs	r2, r2, #0
 987 0016 2900     		movs	r1, r5
 988 0018 2000     		movs	r0, r4
 989 001a FFF7FEFF 		bl	oled_set_pix
 990              	.LVL94:
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 991              		.loc 1 268 37 is_stmt 1 discriminator 3 view .LVU253
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 992              		.loc 1 268 38 is_stmt 0 discriminator 3 view .LVU254
 993 001e 0134     		adds	r4, r4, #1
 994              	.LVL95:
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 995              		.loc 1 268 38 discriminator 3 view .LVU255
 996 0020 E4B2     		uxtb	r4, r4
 997              	.LVL96:
 998              	.L61:
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 999              		.loc 1 268 21 is_stmt 1 discriminator 1 view .LVU256
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 1000              		.loc 1 268 23 is_stmt 0 discriminator 1 view .LVU257
 1001 0022 63B2     		sxtb	r3, r4
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 1002              		.loc 1 268 9 discriminator 1 view .LVU258
 1003 0024 002B     		cmp	r3, #0
 1004 0026 F0DA     		bge	.L60
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1005              		.loc 1 267 34 is_stmt 1 discriminator 2 view .LVU259
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
ARM GAS  /tmp/ccr1UdHJ.s 			page 66


 1006              		.loc 1 267 35 is_stmt 0 discriminator 2 view .LVU260
 1007 0028 0135     		adds	r5, r5, #1
 1008              	.LVL97:
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1009              		.loc 1 267 35 discriminator 2 view .LVU261
 1010 002a EDB2     		uxtb	r5, r5
 1011              	.LVL98:
 1012              	.L59:
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1013              		.loc 1 267 17 is_stmt 1 discriminator 1 view .LVU262
 267:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1014              		.loc 1 267 5 is_stmt 0 discriminator 1 view .LVU263
 1015 002c 3F2D     		cmp	r5, #63
 1016 002e 01D8     		bhi	.L63
 268:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, im[j * GMEM_WIDTH + i] > thrsh);
 1017              		.loc 1 268 16 view .LVU264
 1018 0030 0024     		movs	r4, #0
 1019 0032 F6E7     		b	.L61
 1020              	.L63:
 273:Drivers/Oled/Src/oled_driver.c **** 
 1021              		.loc 1 273 1 view .LVU265
 1022              		@ sp needed
 1023              	.LVL99:
 1024              	.LVL100:
 273:Drivers/Oled/Src/oled_driver.c **** 
 1025              		.loc 1 273 1 view .LVU266
 1026 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1027              		.cfi_endproc
 1028              	.LFE349:
 1030              		.section	.text.oled_pic_dithering,"ax",%progbits
 1031              		.align	1
 1032              		.global	oled_pic_dithering
 1033              		.syntax unified
 1034              		.code	16
 1035              		.thumb_func
 1037              	oled_pic_dithering:
 1038              	.LVL101:
 1039              	.LFB352:
 295:Drivers/Oled/Src/oled_driver.c **** 
 296:Drivers/Oled/Src/oled_driver.c **** void oled_pic_dithering(const uint8_t *im)
 297:Drivers/Oled/Src/oled_driver.c **** {
 1040              		.loc 1 297 1 is_stmt 1 view -0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 8
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              		.loc 1 297 1 is_stmt 0 view .LVU268
 1045 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1046              	.LCFI7:
 1047              		.cfi_def_cfa_offset 20
 1048              		.cfi_offset 4, -20
 1049              		.cfi_offset 5, -16
 1050              		.cfi_offset 6, -12
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
 1053 0002 DE46     		mov	lr, fp
 1054 0004 5746     		mov	r7, r10
 1055 0006 4E46     		mov	r6, r9
ARM GAS  /tmp/ccr1UdHJ.s 			page 67


 1056 0008 4546     		mov	r5, r8
 1057 000a E0B5     		push	{r5, r6, r7, lr}
 1058              	.LCFI8:
 1059              		.cfi_def_cfa_offset 36
 1060              		.cfi_offset 8, -36
 1061              		.cfi_offset 9, -32
 1062              		.cfi_offset 10, -28
 1063              		.cfi_offset 11, -24
 1064 000c 83B0     		sub	sp, sp, #12
 1065              	.LCFI9:
 1066              		.cfi_def_cfa_offset 48
 1067 000e 0100     		movs	r1, r0
 1068 0010 0190     		str	r0, [sp, #4]
 298:Drivers/Oled/Src/oled_driver.c ****     /*
 299:Drivers/Oled/Src/oled_driver.c ****      * Store last two lines as dithering
 300:Drivers/Oled/Src/oled_driver.c ****      * propagates error like that:
 301:Drivers/Oled/Src/oled_driver.c ****      *          *    p  7/16
 302:Drivers/Oled/Src/oled_driver.c ****      *        3/16 5/16 1/16
 303:Drivers/Oled/Src/oled_driver.c ****      */
 304:Drivers/Oled/Src/oled_driver.c ****     static uint8_t buffer[GMEM_WIDTH * 2] = {0};
 1069              		.loc 1 304 5 is_stmt 1 view .LVU269
 305:Drivers/Oled/Src/oled_driver.c ****     int16_t i, j;
 1070              		.loc 1 305 5 view .LVU270
 306:Drivers/Oled/Src/oled_driver.c ****     uint16_t oldpix, newpix;
 1071              		.loc 1 306 5 view .LVU271
 307:Drivers/Oled/Src/oled_driver.c ****     int16_t quant_err;
 1072              		.loc 1 307 5 view .LVU272
 308:Drivers/Oled/Src/oled_driver.c **** 
 309:Drivers/Oled/Src/oled_driver.c ****     /*
 310:Drivers/Oled/Src/oled_driver.c ****      * Init buffer with first two lines
 311:Drivers/Oled/Src/oled_driver.c ****      * of image
 312:Drivers/Oled/Src/oled_driver.c ****      */
 313:Drivers/Oled/Src/oled_driver.c ****     memcpy(buffer, im, GMEM_WIDTH * 2);
 1073              		.loc 1 313 5 view .LVU273
 1074 0012 8022     		movs	r2, #128
 1075 0014 5200     		lsls	r2, r2, #1
 1076 0016 5648     		ldr	r0, .L75
 1077              	.LVL102:
 1078              		.loc 1 313 5 is_stmt 0 view .LVU274
 1079 0018 FFF7FEFF 		bl	memcpy
 1080              	.LVL103:
 314:Drivers/Oled/Src/oled_driver.c **** 
 315:Drivers/Oled/Src/oled_driver.c ****     /*
 316:Drivers/Oled/Src/oled_driver.c ****      * Start the Floyd–Steinberg dithering
 317:Drivers/Oled/Src/oled_driver.c ****      * algorithm
 318:Drivers/Oled/Src/oled_driver.c ****      * The array buffer is required to store
 319:Drivers/Oled/Src/oled_driver.c ****      * recomputed values of neighbouring pixels
 320:Drivers/Oled/Src/oled_driver.c ****      * after applying the algorithm
 321:Drivers/Oled/Src/oled_driver.c ****      * It is impossible to store the whole array
 322:Drivers/Oled/Src/oled_driver.c ****      * as we have limited memory
 323:Drivers/Oled/Src/oled_driver.c ****      */
 324:Drivers/Oled/Src/oled_driver.c ****     for (j = 0; j < GMEM_HEIGHT; j++) {
 1081              		.loc 1 324 5 is_stmt 1 view .LVU275
 1082              		.loc 1 324 12 is_stmt 0 view .LVU276
 1083 001c 0023     		movs	r3, #0
 1084 001e 9A46     		mov	r10, r3
 1085              		.loc 1 324 5 view .LVU277
ARM GAS  /tmp/ccr1UdHJ.s 			page 68


 1086 0020 87E0     		b	.L65
 1087              	.LVL104:
 1088              	.L70:
 325:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 326:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 327:Drivers/Oled/Src/oled_driver.c ****             newpix = (oldpix >= 128) ? 255 : 0;
 1089              		.loc 1 327 20 view .LVU278
 1090 0022 0026     		movs	r6, #0
 1091              	.L66:
 1092              	.LVL105:
 328:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, newpix);
 1093              		.loc 1 328 13 is_stmt 1 discriminator 4 view .LVU279
 1094 0024 F2B2     		uxtb	r2, r6
 1095 0026 5346     		mov	r3, r10
 1096 0028 D9B2     		uxtb	r1, r3
 1097 002a 4B46     		mov	r3, r9
 1098 002c D8B2     		uxtb	r0, r3
 1099 002e FFF7FEFF 		bl	oled_set_pix
 1100              	.LVL106:
 329:Drivers/Oled/Src/oled_driver.c ****             quant_err = oldpix - newpix;
 1101              		.loc 1 329 13 discriminator 4 view .LVU280
 1102              		.loc 1 329 32 is_stmt 0 discriminator 4 view .LVU281
 1103 0032 A41B     		subs	r4, r4, r6
 1104              	.LVL107:
 1105              		.loc 1 329 23 discriminator 4 view .LVU282
 1106 0034 24B2     		sxth	r4, r4
 1107              	.LVL108:
 330:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i + 1, j%2,
 1108              		.loc 1 330 13 is_stmt 1 discriminator 4 view .LVU283
 1109              		.loc 1 330 32 is_stmt 0 discriminator 4 view .LVU284
 1110 0036 4B46     		mov	r3, r9
 1111 0038 9BB2     		uxth	r3, r3
 1112 003a 9B46     		mov	fp, r3
 1113 003c 0133     		adds	r3, r3, #1
 1114              		.loc 1 330 13 discriminator 4 view .LVU285
 1115 003e 1BB2     		sxth	r3, r3
 1116 0040 9846     		mov	r8, r3
 331:Drivers/Oled/Src/oled_driver.c ****                      get_bpix(buffer, i + 1, j%2) + quant_err * 7 / 16);
 1117              		.loc 1 331 22 discriminator 4 view .LVU286
 1118 0042 4B4F     		ldr	r7, .L75
 1119 0044 2A00     		movs	r2, r5
 1120 0046 1900     		movs	r1, r3
 1121 0048 3800     		movs	r0, r7
 1122 004a FFF7FEFF 		bl	get_bpix
 1123              	.LVL109:
 1124 004e 80B2     		uxth	r0, r0
 1125              		.loc 1 331 63 discriminator 4 view .LVU287
 1126 0050 E200     		lsls	r2, r4, #3
 1127 0052 121B     		subs	r2, r2, r4
 1128              		.loc 1 331 67 discriminator 4 view .LVU288
 1129 0054 D317     		asrs	r3, r2, #31
 1130 0056 0F26     		movs	r6, #15
 1131              	.LVL110:
 1132              		.loc 1 331 67 discriminator 4 view .LVU289
 1133 0058 3340     		ands	r3, r6
 1134 005a 9B18     		adds	r3, r3, r2
 1135 005c 1B11     		asrs	r3, r3, #4
ARM GAS  /tmp/ccr1UdHJ.s 			page 69


 1136              		.loc 1 331 51 discriminator 4 view .LVU290
 1137 005e C318     		adds	r3, r0, r3
 330:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i + 1, j%2,
 1138              		.loc 1 330 13 discriminator 4 view .LVU291
 1139 0060 1BB2     		sxth	r3, r3
 1140 0062 2A00     		movs	r2, r5
 1141 0064 4146     		mov	r1, r8
 1142 0066 3800     		movs	r0, r7
 1143 0068 FFF7FEFF 		bl	set_bpix
 1144              	.LVL111:
 332:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i - 1, (j + 1) % 2,
 1145              		.loc 1 332 13 is_stmt 1 discriminator 4 view .LVU292
 1146              		.loc 1 332 32 is_stmt 0 discriminator 4 view .LVU293
 1147 006c 5B46     		mov	r3, fp
 1148 006e 013B     		subs	r3, r3, #1
 1149              		.loc 1 332 13 discriminator 4 view .LVU294
 1150 0070 1BB2     		sxth	r3, r3
 1151 0072 9B46     		mov	fp, r3
 1152              		.loc 1 332 40 discriminator 4 view .LVU295
 1153 0074 5346     		mov	r3, r10
 1154 0076 0133     		adds	r3, r3, #1
 1155              		.loc 1 332 45 discriminator 4 view .LVU296
 1156 0078 DA0F     		lsrs	r2, r3, #31
 1157 007a 9B18     		adds	r3, r3, r2
 1158 007c 0125     		movs	r5, #1
 1159 007e 1D40     		ands	r5, r3
 1160 0080 AD1A     		subs	r5, r5, r2
 1161              		.loc 1 332 13 discriminator 4 view .LVU297
 1162 0082 2DB2     		sxth	r5, r5
 333:Drivers/Oled/Src/oled_driver.c ****                      get_bpix(buffer, i - 1, (j + 1)%2) + quant_err * 3 / 16);
 1163              		.loc 1 333 22 discriminator 4 view .LVU298
 1164 0084 2A00     		movs	r2, r5
 1165 0086 5946     		mov	r1, fp
 1166 0088 3800     		movs	r0, r7
 1167 008a FFF7FEFF 		bl	get_bpix
 1168              	.LVL112:
 1169 008e 80B2     		uxth	r0, r0
 1170              		.loc 1 333 69 discriminator 4 view .LVU299
 1171 0090 6200     		lsls	r2, r4, #1
 1172 0092 1219     		adds	r2, r2, r4
 1173              		.loc 1 333 73 discriminator 4 view .LVU300
 1174 0094 D317     		asrs	r3, r2, #31
 1175 0096 3340     		ands	r3, r6
 1176 0098 9B18     		adds	r3, r3, r2
 1177 009a 1B11     		asrs	r3, r3, #4
 1178              		.loc 1 333 57 discriminator 4 view .LVU301
 1179 009c C318     		adds	r3, r0, r3
 332:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i - 1, (j + 1) % 2,
 1180              		.loc 1 332 13 discriminator 4 view .LVU302
 1181 009e 1BB2     		sxth	r3, r3
 1182 00a0 2A00     		movs	r2, r5
 1183 00a2 5946     		mov	r1, fp
 1184 00a4 3800     		movs	r0, r7
 1185 00a6 FFF7FEFF 		bl	set_bpix
 1186              	.LVL113:
 334:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i, (j + 1) % 2,
 1187              		.loc 1 334 13 is_stmt 1 discriminator 4 view .LVU303
ARM GAS  /tmp/ccr1UdHJ.s 			page 70


 335:Drivers/Oled/Src/oled_driver.c ****                      get_bpix(buffer, i, (j + 1)%2) + quant_err * 5 / 16);
 1188              		.loc 1 335 22 is_stmt 0 discriminator 4 view .LVU304
 1189 00aa 2A00     		movs	r2, r5
 1190 00ac 4946     		mov	r1, r9
 1191 00ae 3800     		movs	r0, r7
 1192 00b0 FFF7FEFF 		bl	get_bpix
 1193              	.LVL114:
 1194 00b4 80B2     		uxth	r0, r0
 1195              		.loc 1 335 65 discriminator 4 view .LVU305
 1196 00b6 A200     		lsls	r2, r4, #2
 1197 00b8 1219     		adds	r2, r2, r4
 1198              		.loc 1 335 69 discriminator 4 view .LVU306
 1199 00ba D317     		asrs	r3, r2, #31
 1200 00bc 3340     		ands	r3, r6
 1201 00be 9B18     		adds	r3, r3, r2
 1202 00c0 1B11     		asrs	r3, r3, #4
 1203              		.loc 1 335 53 discriminator 4 view .LVU307
 1204 00c2 C318     		adds	r3, r0, r3
 334:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i, (j + 1) % 2,
 1205              		.loc 1 334 13 discriminator 4 view .LVU308
 1206 00c4 1BB2     		sxth	r3, r3
 1207 00c6 2A00     		movs	r2, r5
 1208 00c8 4946     		mov	r1, r9
 1209 00ca 3800     		movs	r0, r7
 1210 00cc FFF7FEFF 		bl	set_bpix
 1211              	.LVL115:
 336:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i + 1, (j + 1) % 2,
 1212              		.loc 1 336 13 is_stmt 1 discriminator 4 view .LVU309
 337:Drivers/Oled/Src/oled_driver.c ****                      get_bpix(buffer, i + 1, (j + 1)%2) + quant_err * 1 / 16);
 1213              		.loc 1 337 22 is_stmt 0 discriminator 4 view .LVU310
 1214 00d0 2A00     		movs	r2, r5
 1215 00d2 4146     		mov	r1, r8
 1216 00d4 3800     		movs	r0, r7
 1217 00d6 FFF7FEFF 		bl	get_bpix
 1218              	.LVL116:
 1219 00da 80B2     		uxth	r0, r0
 1220              		.loc 1 337 73 discriminator 4 view .LVU311
 1221 00dc E317     		asrs	r3, r4, #31
 1222 00de 3340     		ands	r3, r6
 1223 00e0 1B19     		adds	r3, r3, r4
 1224 00e2 1B11     		asrs	r3, r3, #4
 1225 00e4 9BB2     		uxth	r3, r3
 1226              		.loc 1 337 57 discriminator 4 view .LVU312
 1227 00e6 C318     		adds	r3, r0, r3
 336:Drivers/Oled/Src/oled_driver.c ****             set_bpix(buffer, i + 1, (j + 1) % 2,
 1228              		.loc 1 336 13 discriminator 4 view .LVU313
 1229 00e8 1BB2     		sxth	r3, r3
 1230 00ea 2A00     		movs	r2, r5
 1231 00ec 4146     		mov	r1, r8
 1232 00ee 3800     		movs	r0, r7
 1233 00f0 FFF7FEFF 		bl	set_bpix
 1234              	.LVL117:
 325:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 1235              		.loc 1 325 37 is_stmt 1 discriminator 4 view .LVU314
 325:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 1236              		.loc 1 325 38 is_stmt 0 discriminator 4 view .LVU315
 1237 00f4 C146     		mov	r9, r8
ARM GAS  /tmp/ccr1UdHJ.s 			page 71


 1238              	.LVL118:
 1239              	.L69:
 325:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 1240              		.loc 1 325 21 is_stmt 1 discriminator 2 view .LVU316
 325:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 1241              		.loc 1 325 9 is_stmt 0 discriminator 2 view .LVU317
 1242 00f6 4B46     		mov	r3, r9
 1243 00f8 7F2B     		cmp	r3, #127
 1244 00fa 11DC     		bgt	.L72
 326:Drivers/Oled/Src/oled_driver.c ****             newpix = (oldpix >= 128) ? 255 : 0;
 1245              		.loc 1 326 13 is_stmt 1 view .LVU318
 326:Drivers/Oled/Src/oled_driver.c ****             newpix = (oldpix >= 128) ? 255 : 0;
 1246              		.loc 1 326 22 is_stmt 0 view .LVU319
 1247 00fc 5346     		mov	r3, r10
 1248 00fe DB0F     		lsrs	r3, r3, #31
 1249 0100 5246     		mov	r2, r10
 1250 0102 D218     		adds	r2, r2, r3
 1251 0104 0125     		movs	r5, #1
 1252 0106 1540     		ands	r5, r2
 1253 0108 ED1A     		subs	r5, r5, r3
 1254 010a 2DB2     		sxth	r5, r5
 1255 010c 2A00     		movs	r2, r5
 1256 010e 4946     		mov	r1, r9
 1257 0110 1748     		ldr	r0, .L75
 1258 0112 FFF7FEFF 		bl	get_bpix
 1259              	.LVL119:
 326:Drivers/Oled/Src/oled_driver.c ****             newpix = (oldpix >= 128) ? 255 : 0;
 1260              		.loc 1 326 20 view .LVU320
 1261 0116 84B2     		uxth	r4, r0
 1262              	.LVL120:
 327:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, newpix);
 1263              		.loc 1 327 13 is_stmt 1 view .LVU321
 327:Drivers/Oled/Src/oled_driver.c ****             oled_set_pix(i, j, newpix);
 1264              		.loc 1 327 20 is_stmt 0 view .LVU322
 1265 0118 7F2C     		cmp	r4, #127
 1266 011a 82D9     		bls	.L70
 1267 011c FF26     		movs	r6, #255
 1268 011e 81E7     		b	.L66
 1269              	.LVL121:
 1270              	.L72:
 338:Drivers/Oled/Src/oled_driver.c ****         }
 339:Drivers/Oled/Src/oled_driver.c ****         /*
 340:Drivers/Oled/Src/oled_driver.c ****          * Shift second line to the first one
 341:Drivers/Oled/Src/oled_driver.c ****          * and fetch next line from image array
 342:Drivers/Oled/Src/oled_driver.c ****          */
 343:Drivers/Oled/Src/oled_driver.c ****         if (j >= 1 && j < (GMEM_HEIGHT - 1)) {
 1271              		.loc 1 343 9 is_stmt 1 view .LVU323
 1272              		.loc 1 343 20 is_stmt 0 view .LVU324
 1273 0120 5346     		mov	r3, r10
 1274 0122 9CB2     		uxth	r4, r3
 1275 0124 631E     		subs	r3, r4, #1
 1276 0126 9BB2     		uxth	r3, r3
 1277              		.loc 1 343 12 view .LVU325
 1278 0128 3D2B     		cmp	r3, #61
 1279 012a 08D9     		bls	.L73
 1280              	.L68:
 324:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
ARM GAS  /tmp/ccr1UdHJ.s 			page 72


 1281              		.loc 1 324 34 is_stmt 1 discriminator 2 view .LVU326
 324:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1282              		.loc 1 324 35 is_stmt 0 discriminator 2 view .LVU327
 1283 012c 0134     		adds	r4, r4, #1
 1284 012e 23B2     		sxth	r3, r4
 1285 0130 9A46     		mov	r10, r3
 1286              	.LVL122:
 1287              	.L65:
 324:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1288              		.loc 1 324 17 is_stmt 1 discriminator 1 view .LVU328
 324:Drivers/Oled/Src/oled_driver.c ****         for (i = 0; i < GMEM_WIDTH; i++) {
 1289              		.loc 1 324 5 is_stmt 0 discriminator 1 view .LVU329
 1290 0132 5346     		mov	r3, r10
 1291 0134 3F2B     		cmp	r3, #63
 1292 0136 14DC     		bgt	.L74
 325:Drivers/Oled/Src/oled_driver.c ****             oldpix = get_bpix(buffer, i, j % 2);
 1293              		.loc 1 325 16 view .LVU330
 1294 0138 0023     		movs	r3, #0
 1295 013a 9946     		mov	r9, r3
 1296 013c DBE7     		b	.L69
 1297              	.LVL123:
 1298              	.L73:
 344:Drivers/Oled/Src/oled_driver.c ****             memcpy(buffer, buffer + GMEM_WIDTH, GMEM_WIDTH);
 1299              		.loc 1 344 13 is_stmt 1 view .LVU331
 1300 013e 0D4D     		ldr	r5, .L75+4
 1301 0140 8026     		movs	r6, #128
 1302 0142 3200     		movs	r2, r6
 1303 0144 2900     		movs	r1, r5
 1304 0146 0A48     		ldr	r0, .L75
 1305 0148 FFF7FEFF 		bl	memcpy
 1306              	.LVL124:
 345:Drivers/Oled/Src/oled_driver.c ****             memcpy(buffer + GMEM_WIDTH, im + GMEM_WIDTH * (j + 1), GMEM_WIDTH);
 1307              		.loc 1 345 13 view .LVU332
 1308              		.loc 1 345 62 is_stmt 0 view .LVU333
 1309 014c 5146     		mov	r1, r10
 1310 014e 0131     		adds	r1, r1, #1
 1311              		.loc 1 345 57 view .LVU334
 1312 0150 C901     		lsls	r1, r1, #7
 1313              		.loc 1 345 44 view .LVU335
 1314 0152 019B     		ldr	r3, [sp, #4]
 1315 0154 9C46     		mov	ip, r3
 1316 0156 6144     		add	r1, r1, ip
 1317              		.loc 1 345 13 view .LVU336
 1318 0158 3200     		movs	r2, r6
 1319 015a 2800     		movs	r0, r5
 1320 015c FFF7FEFF 		bl	memcpy
 1321              	.LVL125:
 1322 0160 E4E7     		b	.L68
 1323              	.LVL126:
 1324              	.L74:
 346:Drivers/Oled/Src/oled_driver.c ****         }
 347:Drivers/Oled/Src/oled_driver.c ****     }
 348:Drivers/Oled/Src/oled_driver.c **** }
 1325              		.loc 1 348 1 view .LVU337
 1326 0162 03B0     		add	sp, sp, #12
 1327              		@ sp needed
 1328              	.LVL127:
ARM GAS  /tmp/ccr1UdHJ.s 			page 73


 1329              		.loc 1 348 1 view .LVU338
 1330 0164 F0BC     		pop	{r4, r5, r6, r7}
 1331 0166 BB46     		mov	fp, r7
 1332 0168 B246     		mov	r10, r6
 1333 016a A946     		mov	r9, r5
 1334 016c A046     		mov	r8, r4
 1335 016e F0BD     		pop	{r4, r5, r6, r7, pc}
 1336              	.L76:
 1337              		.align	2
 1338              	.L75:
 1339 0170 00000000 		.word	buffer.0
 1340 0174 80000000 		.word	buffer.0+128
 1341              		.cfi_endproc
 1342              	.LFE352:
 1344              		.section	.bss.buffer.0,"aw",%nobits
 1345              		.align	2
 1348              	buffer.0:
 1349 0000 00000000 		.space	256
 1349      00000000 
 1349      00000000 
 1349      00000000 
 1349      00000000 
 1350              		.section	.bss.curX,"aw",%nobits
 1351              		.set	.LANCHOR0,. + 0
 1354              	curX:
 1355 0000 00       		.space	1
 1356              		.section	.bss.curY,"aw",%nobits
 1357              		.set	.LANCHOR1,. + 0
 1360              	curY:
 1361 0000 00       		.space	1
 1362              		.section	.bss.gmem,"aw",%nobits
 1363              		.align	2
 1366              	gmem:
 1367 0000 00000000 		.space	1024
 1367      00000000 
 1367      00000000 
 1367      00000000 
 1367      00000000 
 1368              		.text
 1369              	.Letext0:
 1370              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 1371              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 1372              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1373              		.file 6 "Drivers/Oled/Inc/oled_driver.h"
 1374              		.file 7 "<built-in>"
 1375              		.file 8 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/string.h"
ARM GAS  /tmp/ccr1UdHJ.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 oled_driver.c
     /tmp/ccr1UdHJ.s:18     .text.oled_cmd_send:0000000000000000 $t
     /tmp/ccr1UdHJ.s:23     .text.oled_cmd_send:0000000000000000 oled_cmd_send
     /tmp/ccr1UdHJ.s:139    .text.oled_cmd_send:0000000000000034 $d
     /tmp/ccr1UdHJ.s:146    .text.oled_data_send:0000000000000000 $t
     /tmp/ccr1UdHJ.s:151    .text.oled_data_send:0000000000000000 oled_data_send
     /tmp/ccr1UdHJ.s:302    .text.oled_data_send:000000000000004c $d
     /tmp/ccr1UdHJ.s:309    .text.set_bpix:0000000000000000 $t
     /tmp/ccr1UdHJ.s:314    .text.set_bpix:0000000000000000 set_bpix
     /tmp/ccr1UdHJ.s:375    .text.get_bpix:0000000000000000 $t
     /tmp/ccr1UdHJ.s:380    .text.get_bpix:0000000000000000 get_bpix
     /tmp/ccr1UdHJ.s:431    .text.oled_clr:0000000000000000 $t
     /tmp/ccr1UdHJ.s:437    .text.oled_clr:0000000000000000 oled_clr
     /tmp/ccr1UdHJ.s:466    .text.oled_clr:0000000000000010 $d
     /tmp/ccr1UdHJ.s:1366   .bss.gmem:0000000000000000 gmem
     /tmp/ccr1UdHJ.s:471    .text.oled_update:0000000000000000 $t
     /tmp/ccr1UdHJ.s:477    .text.oled_update:0000000000000000 oled_update
     /tmp/ccr1UdHJ.s:540    .text.oled_update:0000000000000034 $d
     /tmp/ccr1UdHJ.s:545    .text.oled_config:0000000000000000 $t
     /tmp/ccr1UdHJ.s:551    .text.oled_config:0000000000000000 oled_config
     /tmp/ccr1UdHJ.s:676    .text.oled_config:0000000000000098 $d
     /tmp/ccr1UdHJ.s:681    .text.oled_set_pix:0000000000000000 $t
     /tmp/ccr1UdHJ.s:687    .text.oled_set_pix:0000000000000000 oled_set_pix
     /tmp/ccr1UdHJ.s:758    .text.oled_set_pix:0000000000000040 $d
     /tmp/ccr1UdHJ.s:763    .text.oled_set_cursor:0000000000000000 $t
     /tmp/ccr1UdHJ.s:769    .text.oled_set_cursor:0000000000000000 oled_set_cursor
     /tmp/ccr1UdHJ.s:792    .text.oled_set_cursor:000000000000000c $d
     /tmp/ccr1UdHJ.s:798    .text.oled_putc:0000000000000000 $t
     /tmp/ccr1UdHJ.s:804    .text.oled_putc:0000000000000000 oled_putc
     /tmp/ccr1UdHJ.s:935    .text.oled_putc:0000000000000078 $d
     /tmp/ccr1UdHJ.s:942    .text.oled_pic:0000000000000000 $t
     /tmp/ccr1UdHJ.s:948    .text.oled_pic:0000000000000000 oled_pic
     /tmp/ccr1UdHJ.s:1031   .text.oled_pic_dithering:0000000000000000 $t
     /tmp/ccr1UdHJ.s:1037   .text.oled_pic_dithering:0000000000000000 oled_pic_dithering
     /tmp/ccr1UdHJ.s:1339   .text.oled_pic_dithering:0000000000000170 $d
     /tmp/ccr1UdHJ.s:1348   .bss.buffer.0:0000000000000000 buffer.0
     /tmp/ccr1UdHJ.s:1345   .bss.buffer.0:0000000000000000 $d
     /tmp/ccr1UdHJ.s:1354   .bss.curX:0000000000000000 curX
     /tmp/ccr1UdHJ.s:1355   .bss.curX:0000000000000000 $d
     /tmp/ccr1UdHJ.s:1360   .bss.curY:0000000000000000 curY
     /tmp/ccr1UdHJ.s:1361   .bss.curY:0000000000000000 $d
     /tmp/ccr1UdHJ.s:1363   .bss.gmem:0000000000000000 $d

UNDEFINED SYMBOLS
memset
font_desc
memcpy
