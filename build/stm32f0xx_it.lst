ARM GAS  /tmp/ccvLDpwd.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f0xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB456:
  26              		.file 1 "Core/Src/stm32f0xx_it.c"
   1:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f0xx_it.c **** /**
   3:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Core/Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f0xx_it.c ****   * @attention
   8:Core/Src/stm32f0xx_it.c ****   *
   9:Core/Src/stm32f0xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f0xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f0xx_it.c ****   *
  12:Core/Src/stm32f0xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f0xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f0xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f0xx_it.c ****   *
  16:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f0xx_it.c ****   */
  18:Core/Src/stm32f0xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f0xx_it.c **** 
  20:Core/Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f0xx_it.c **** #include "main.h"
  22:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  23:Core/Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f0xx_it.c **** #include "servo.h"
  26:Core/Src/stm32f0xx_it.c **** #include "squeaker.h"
  27:Core/Src/stm32f0xx_it.c **** #include "stdlib.h"
  28:Core/Src/stm32f0xx_it.c **** #include "quaternion_lib.h"
  29:Core/Src/stm32f0xx_it.c **** #include "giro_driver.h"
  30:Core/Src/stm32f0xx_it.c **** 
  31:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_rcc.h"
  32:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_system.h"
ARM GAS  /tmp/ccvLDpwd.s 			page 2


  33:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_bus.h"
  34:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_gpio.h"
  35:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_exti.h"
  36:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_utils.h"
  37:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_cortex.h"
  38:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_ll_usart.h"
  39:Core/Src/stm32f0xx_it.c **** 
  40:Core/Src/stm32f0xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  41:Core/Src/stm32f0xx_it.c **** 
  42:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim1;
  43:Core/Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim2;
  44:Core/Src/stm32f0xx_it.c **** 
  45:Core/Src/stm32f0xx_it.c **** extern int8_t button_status ;
  46:Core/Src/stm32f0xx_it.c **** 
  47:Core/Src/stm32f0xx_it.c **** extern uint64_t button_delay_counter ;
  48:Core/Src/stm32f0xx_it.c **** 
  49:Core/Src/stm32f0xx_it.c **** extern uint16_t number ;
  50:Core/Src/stm32f0xx_it.c **** 
  51:Core/Src/stm32f0xx_it.c **** extern const uint64_t sis_tik_frik;
  52:Core/Src/stm32f0xx_it.c **** 
  53:Core/Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart1;
  54:Core/Src/stm32f0xx_it.c **** 
  55:Core/Src/stm32f0xx_it.c **** vector front = {1, 0, 0};
  56:Core/Src/stm32f0xx_it.c **** vector app = {0, 1, 0};
  57:Core/Src/stm32f0xx_it.c **** vector oz = {0, 0, 1};
  58:Core/Src/stm32f0xx_it.c **** 
  59:Core/Src/stm32f0xx_it.c **** 
  60:Core/Src/stm32f0xx_it.c **** u_int8_t mode = 1;
  61:Core/Src/stm32f0xx_it.c **** 
  62:Core/Src/stm32f0xx_it.c **** #define LOCK_MODE 1
  63:Core/Src/stm32f0xx_it.c **** #define UNLOCK_MODE 1 << 1
  64:Core/Src/stm32f0xx_it.c **** 
  65:Core/Src/stm32f0xx_it.c **** #define BUTTON_DELAY 1
  66:Core/Src/stm32f0xx_it.c **** 
  67:Core/Src/stm32f0xx_it.c **** #define BUTTON_PUSH 1
  68:Core/Src/stm32f0xx_it.c **** 
  69:Core/Src/stm32f0xx_it.c **** #define BUTTON_PUSHED 1 << 1
  70:Core/Src/stm32f0xx_it.c **** 
  71:Core/Src/stm32f0xx_it.c **** #define BUTTON_UNPUSHED 1 << 2
  72:Core/Src/stm32f0xx_it.c **** 
  73:Core/Src/stm32f0xx_it.c **** typedef struct {
  74:Core/Src/stm32f0xx_it.c ****     uint8_t cmd;
  75:Core/Src/stm32f0xx_it.c ****     uint8_t params[10];
  76:Core/Src/stm32f0xx_it.c ****     uint8_t active;
  77:Core/Src/stm32f0xx_it.c **** } uart_req_t;
  78:Core/Src/stm32f0xx_it.c **** static uart_req_t uart_req;
  79:Core/Src/stm32f0xx_it.c **** 
  80:Core/Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  81:Core/Src/stm32f0xx_it.c **** 
  82:Core/Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  83:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  84:Core/Src/stm32f0xx_it.c **** 
  85:Core/Src/stm32f0xx_it.c **** /* USER CODE END TD */
  86:Core/Src/stm32f0xx_it.c **** 
  87:Core/Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  88:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  89:Core/Src/stm32f0xx_it.c **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 3


  90:Core/Src/stm32f0xx_it.c **** /* USER CODE END PD */
  91:Core/Src/stm32f0xx_it.c **** 
  92:Core/Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  93:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  94:Core/Src/stm32f0xx_it.c **** 
  95:Core/Src/stm32f0xx_it.c **** /* USER CODE END PM */
  96:Core/Src/stm32f0xx_it.c **** 
  97:Core/Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  98:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  99:Core/Src/stm32f0xx_it.c **** 
 100:Core/Src/stm32f0xx_it.c **** /* USER CODE END PV */
 101:Core/Src/stm32f0xx_it.c **** 
 102:Core/Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
 103:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
 104:Core/Src/stm32f0xx_it.c **** 
 105:Core/Src/stm32f0xx_it.c **** /* USER CODE END PFP */
 106:Core/Src/stm32f0xx_it.c **** 
 107:Core/Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
 108:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
 109:Core/Src/stm32f0xx_it.c **** 
 110:Core/Src/stm32f0xx_it.c **** /* USER CODE END 0 */
 111:Core/Src/stm32f0xx_it.c **** 
 112:Core/Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
 113:Core/Src/stm32f0xx_it.c **** extern UART_HandleTypeDef huart1;
 114:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
 115:Core/Src/stm32f0xx_it.c **** 
 116:Core/Src/stm32f0xx_it.c **** /* USER CODE END EV */
 117:Core/Src/stm32f0xx_it.c **** 
 118:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 119:Core/Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */
 120:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 121:Core/Src/stm32f0xx_it.c **** /**
 122:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
 123:Core/Src/stm32f0xx_it.c ****   */
 124:Core/Src/stm32f0xx_it.c **** void NMI_Handler(void)
 125:Core/Src/stm32f0xx_it.c **** {
  27              		.loc 1 125 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
 126:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 127:Core/Src/stm32f0xx_it.c **** 
 128:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
 129:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 130:Core/Src/stm32f0xx_it.c ****   while (1)
  34              		.loc 1 130 3 discriminator 1 view .LVU1
 131:Core/Src/stm32f0xx_it.c ****   {
 132:Core/Src/stm32f0xx_it.c ****   }
  35              		.loc 1 132 3 discriminator 1 view .LVU2
 130:Core/Src/stm32f0xx_it.c ****   {
  36              		.loc 1 130 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE456:
ARM GAS  /tmp/ccvLDpwd.s 			page 4


  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.code	16
  46              		.thumb_func
  48              	HardFault_Handler:
  49              	.LFB457:
 133:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
 134:Core/Src/stm32f0xx_it.c **** }
 135:Core/Src/stm32f0xx_it.c **** 
 136:Core/Src/stm32f0xx_it.c **** /**
 137:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
 138:Core/Src/stm32f0xx_it.c ****   */
 139:Core/Src/stm32f0xx_it.c **** void HardFault_Handler(void)
 140:Core/Src/stm32f0xx_it.c **** {
  50              		.loc 1 140 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
 141:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 142:Core/Src/stm32f0xx_it.c **** 
 143:Core/Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 144:Core/Src/stm32f0xx_it.c ****   while (1)
  57              		.loc 1 144 3 discriminator 1 view .LVU5
 145:Core/Src/stm32f0xx_it.c ****   {
 146:Core/Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 147:Core/Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 148:Core/Src/stm32f0xx_it.c ****   }
  58              		.loc 1 148 3 discriminator 1 view .LVU6
 144:Core/Src/stm32f0xx_it.c ****   {
  59              		.loc 1 144 9 discriminator 1 view .LVU7
  60 0000 FEE7     		b	.L4
  61              		.cfi_endproc
  62              	.LFE457:
  64              		.section	.text.SVC_Handler,"ax",%progbits
  65              		.align	1
  66              		.global	SVC_Handler
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  71              	SVC_Handler:
  72              	.LFB458:
 149:Core/Src/stm32f0xx_it.c **** }
 150:Core/Src/stm32f0xx_it.c **** 
 151:Core/Src/stm32f0xx_it.c **** /**
 152:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 153:Core/Src/stm32f0xx_it.c ****   */
 154:Core/Src/stm32f0xx_it.c **** void SVC_Handler(void)
 155:Core/Src/stm32f0xx_it.c **** {
  73              		.loc 1 155 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvLDpwd.s 			page 5


  77              		@ link register save eliminated.
 156:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 157:Core/Src/stm32f0xx_it.c **** 
 158:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 159:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 160:Core/Src/stm32f0xx_it.c **** 
 161:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 162:Core/Src/stm32f0xx_it.c **** }
  78              		.loc 1 162 1 view .LVU9
  79              		@ sp needed
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE458:
  84              		.section	.text.PendSV_Handler,"ax",%progbits
  85              		.align	1
  86              		.global	PendSV_Handler
  87              		.syntax unified
  88              		.code	16
  89              		.thumb_func
  91              	PendSV_Handler:
  92              	.LFB459:
 163:Core/Src/stm32f0xx_it.c **** 
 164:Core/Src/stm32f0xx_it.c **** /**
 165:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 166:Core/Src/stm32f0xx_it.c ****   */
 167:Core/Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 168:Core/Src/stm32f0xx_it.c **** {
  93              		.loc 1 168 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
 169:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 170:Core/Src/stm32f0xx_it.c **** 
 171:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 172:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 173:Core/Src/stm32f0xx_it.c **** 
 174:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 175:Core/Src/stm32f0xx_it.c **** }
  98              		.loc 1 175 1 view .LVU11
  99              		@ sp needed
 100 0000 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE459:
 104              		.global	__aeabi_dmul
 105              		.global	__aeabi_ddiv
 106              		.global	__aeabi_dadd
 107              		.global	__aeabi_dsub
 108              		.global	__aeabi_dcmplt
 109              		.global	__aeabi_dcmpgt
 110              		.section	.text.SysTick_Handler,"ax",%progbits
 111              		.align	1
 112              		.global	SysTick_Handler
 113              		.syntax unified
 114              		.code	16
 115              		.thumb_func
 117              	SysTick_Handler:
ARM GAS  /tmp/ccvLDpwd.s 			page 6


 118              	.LFB460:
 176:Core/Src/stm32f0xx_it.c **** 
 177:Core/Src/stm32f0xx_it.c **** /**
 178:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 179:Core/Src/stm32f0xx_it.c ****   */
 180:Core/Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 181:Core/Src/stm32f0xx_it.c **** {
 119              		.loc 1 181 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 88
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 124              	.LCFI0:
 125              		.cfi_def_cfa_offset 20
 126              		.cfi_offset 4, -20
 127              		.cfi_offset 5, -16
 128              		.cfi_offset 6, -12
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 D646     		mov	lr, r10
 132 0004 4F46     		mov	r7, r9
 133 0006 4646     		mov	r6, r8
 134 0008 C0B5     		push	{r6, r7, lr}
 135              	.LCFI1:
 136              		.cfi_def_cfa_offset 32
 137              		.cfi_offset 8, -32
 138              		.cfi_offset 9, -28
 139              		.cfi_offset 10, -24
 140 000a A0B0     		sub	sp, sp, #128
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 160
 182:Core/Src/stm32f0xx_it.c **** 
 183:Core/Src/stm32f0xx_it.c ****    u_int8_t* a = "yes\n";
 143              		.loc 1 183 4 view .LVU13
 144              	.LVL0:
 184:Core/Src/stm32f0xx_it.c ****    /*
 185:Core/Src/stm32f0xx_it.c ****   while (!LL_USART_IsActiveFlag_TXE(USART1));
 186:Core/Src/stm32f0xx_it.c ****     LL_USART_TransmitData8(USART1, '1');
 187:Core/Src/stm32f0xx_it.c ****     */
 188:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 189:Core/Src/stm32f0xx_it.c **** 	if((button_status & BUTTON_PUSH) && (button_delay_counter < BUTTON_DELAY))
 145              		.loc 1 189 2 view .LVU14
 146              		.loc 1 189 20 is_stmt 0 view .LVU15
 147 000c 954B     		ldr	r3, .L25
 148 000e 0020     		movs	r0, #0
 149 0010 1856     		ldrsb	r0, [r3, r0]
 150 0012 1B78     		ldrb	r3, [r3]
 151 0014 0122     		movs	r2, #1
 152 0016 1100     		movs	r1, r2
 153 0018 1940     		ands	r1, r3
 154              		.loc 1 189 4 view .LVU16
 155 001a 1A42     		tst	r2, r3
 156 001c 1CD0     		beq	.L8
 157              		.loc 1 189 60 discriminator 1 view .LVU17
 158 001e 924A     		ldr	r2, .L25+4
 159 0020 1468     		ldr	r4, [r2]
 160 0022 5568     		ldr	r5, [r2, #4]
ARM GAS  /tmp/ccvLDpwd.s 			page 7


 161              		.loc 1 189 35 discriminator 1 view .LVU18
 162 0024 2200     		movs	r2, r4
 163 0026 2A43     		orrs	r2, r5
 164 0028 16D1     		bne	.L8
 190:Core/Src/stm32f0xx_it.c ****     {
 191:Core/Src/stm32f0xx_it.c ****         button_delay_counter++;
 165              		.loc 1 191 9 is_stmt 1 view .LVU19
 166              		.loc 1 191 29 is_stmt 0 view .LVU20
 167 002a 0122     		movs	r2, #1
 168 002c 0023     		movs	r3, #0
 169 002e 1219     		adds	r2, r2, r4
 170 0030 6B41     		adcs	r3, r3, r5
 171 0032 8D49     		ldr	r1, .L25+4
 172 0034 0A60     		str	r2, [r1]
 173 0036 4B60     		str	r3, [r1, #4]
 174              	.L9:
 192:Core/Src/stm32f0xx_it.c ****     }
 193:Core/Src/stm32f0xx_it.c **** 	else if(button_status & BUTTON_PUSH)
 194:Core/Src/stm32f0xx_it.c **** 	{
 195:Core/Src/stm32f0xx_it.c **** 		if(!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_3))
 196:Core/Src/stm32f0xx_it.c **** 		{
 197:Core/Src/stm32f0xx_it.c **** 			if(!(button_status & BUTTON_PUSHED))
 198:Core/Src/stm32f0xx_it.c **** 			{
 199:Core/Src/stm32f0xx_it.c ****         if(mode == LOCK_MODE)
 200:Core/Src/stm32f0xx_it.c ****         {
 201:Core/Src/stm32f0xx_it.c ****           mode = UNLOCK_MODE;
 202:Core/Src/stm32f0xx_it.c ****         }
 203:Core/Src/stm32f0xx_it.c ****         else
 204:Core/Src/stm32f0xx_it.c ****         {
 205:Core/Src/stm32f0xx_it.c ****           mode = LOCK_MODE;
 206:Core/Src/stm32f0xx_it.c ****         }
 207:Core/Src/stm32f0xx_it.c **** 				button_status = button_status | BUTTON_PUSHED;
 208:Core/Src/stm32f0xx_it.c **** 			}
 209:Core/Src/stm32f0xx_it.c **** 		}
 210:Core/Src/stm32f0xx_it.c **** 		else
 211:Core/Src/stm32f0xx_it.c **** 		{
 212:Core/Src/stm32f0xx_it.c **** 			if(!(button_status & BUTTON_UNPUSHED))
 213:Core/Src/stm32f0xx_it.c **** 			{
 214:Core/Src/stm32f0xx_it.c **** 				//здесь пока тоже пусто)
 215:Core/Src/stm32f0xx_it.c **** 				button_status = button_status & (~(BUTTON_PUSH | BUTTON_PUSHED));
 216:Core/Src/stm32f0xx_it.c **** 				button_status = button_status | BUTTON_UNPUSHED;
 217:Core/Src/stm32f0xx_it.c **** 			}
 218:Core/Src/stm32f0xx_it.c **** 		}
 219:Core/Src/stm32f0xx_it.c **** 	}
 220:Core/Src/stm32f0xx_it.c **** 
 221:Core/Src/stm32f0xx_it.c ****   #define POPRAVKA 0.005
 222:Core/Src/stm32f0xx_it.c **** 
 223:Core/Src/stm32f0xx_it.c ****     
 224:Core/Src/stm32f0xx_it.c **** 
 225:Core/Src/stm32f0xx_it.c ****   if(mode == LOCK_MODE)
 175              		.loc 1 225 3 is_stmt 1 view .LVU21
 176              		.loc 1 225 11 is_stmt 0 view .LVU22
 177 0038 8C4B     		ldr	r3, .L25+8
 178 003a 1B78     		ldrb	r3, [r3]
 179              		.loc 1 225 5 view .LVU23
 180 003c 012B     		cmp	r3, #1
 181 003e 2ED0     		beq	.L22
ARM GAS  /tmp/ccvLDpwd.s 			page 8


 226:Core/Src/stm32f0xx_it.c ****   { 
 227:Core/Src/stm32f0xx_it.c ****     double psi = 0;
 228:Core/Src/stm32f0xx_it.c ****     double phi = 0;
 229:Core/Src/stm32f0xx_it.c ****     double teta = 0;
 230:Core/Src/stm32f0xx_it.c **** 
 231:Core/Src/stm32f0xx_it.c ****     psi = 0;
 232:Core/Src/stm32f0xx_it.c ****     phi = 0;
 233:Core/Src/stm32f0xx_it.c ****     teta = 0;
 234:Core/Src/stm32f0xx_it.c **** 
 235:Core/Src/stm32f0xx_it.c ****     giro_read_angls(&hi2c1, &psi, &phi, &teta);
 236:Core/Src/stm32f0xx_it.c ****     squeaker_set_frik(&htim1, 4, 9000);
 237:Core/Src/stm32f0xx_it.c **** 
 238:Core/Src/stm32f0xx_it.c ****     uint16_t pin_mask = LL_GPIO_ReadOutputPort(GPIOC);
 239:Core/Src/stm32f0xx_it.c **** 		
 240:Core/Src/stm32f0xx_it.c **** 		pin_mask = pin_mask & (~(LL_GPIO_PIN_8 | LL_GPIO_PIN_9));
 241:Core/Src/stm32f0xx_it.c **** 
 242:Core/Src/stm32f0xx_it.c ****     double servo_rick = 0;
 243:Core/Src/stm32f0xx_it.c ****     double servo_tang = 0;
 244:Core/Src/stm32f0xx_it.c ****     double servo_kren = 0;
 245:Core/Src/stm32f0xx_it.c **** 
 246:Core/Src/stm32f0xx_it.c ****     psi = psi*POPRAVKA;
 247:Core/Src/stm32f0xx_it.c ****     teta = -teta*POPRAVKA;  
 248:Core/Src/stm32f0xx_it.c ****     phi = phi*POPRAVKA;
 249:Core/Src/stm32f0xx_it.c **** 
 250:Core/Src/stm32f0xx_it.c ****     front = Rotate(front, psi, teta, phi);
 251:Core/Src/stm32f0xx_it.c ****     app = Rotate(app, psi, teta, phi);
 252:Core/Src/stm32f0xx_it.c ****     
 253:Core/Src/stm32f0xx_it.c ****     servo_rick = atan(front.y / front.x);
 254:Core/Src/stm32f0xx_it.c ****     servo_tang = -asin(front.z);
 255:Core/Src/stm32f0xx_it.c ****     
 256:Core/Src/stm32f0xx_it.c ****     
 257:Core/Src/stm32f0xx_it.c ****     vector r0 = Vector_Vector_Mul(&front, &oz);
 258:Core/Src/stm32f0xx_it.c ****     
 259:Core/Src/stm32f0xx_it.c ****     servo_kren = asin(Vector_Scalar_Mul(&app, &r0)/sqrt(Vector_Scalar_Mul(&r0, &r0)));
 260:Core/Src/stm32f0xx_it.c ****     
 261:Core/Src/stm32f0xx_it.c **** 
 262:Core/Src/stm32f0xx_it.c ****     set_3_servo(&htim2, servo_rick + 3.14/2 , servo_tang + 3.14/2 , servo_kren + 3.14/2);
 263:Core/Src/stm32f0xx_it.c **** 
 264:Core/Src/stm32f0xx_it.c ****     if(servo_tang > 0)
 265:Core/Src/stm32f0xx_it.c **** 		{
 266:Core/Src/stm32f0xx_it.c **** 			pin_mask = pin_mask | LL_GPIO_PIN_8;
 267:Core/Src/stm32f0xx_it.c **** 		}
 268:Core/Src/stm32f0xx_it.c **** 		else if (servo_tang < 0)
 269:Core/Src/stm32f0xx_it.c **** 		{
 270:Core/Src/stm32f0xx_it.c **** 			pin_mask = pin_mask | LL_GPIO_PIN_9;
 271:Core/Src/stm32f0xx_it.c **** 		}
 272:Core/Src/stm32f0xx_it.c ****     LL_GPIO_WriteOutputPort(GPIOC, pin_mask);
 273:Core/Src/stm32f0xx_it.c ****   }
 274:Core/Src/stm32f0xx_it.c ****   else
 275:Core/Src/stm32f0xx_it.c ****   {
 276:Core/Src/stm32f0xx_it.c ****     off_squeaker(&htim1, 4);
 182              		.loc 1 276 5 is_stmt 1 view .LVU24
 183 0040 0421     		movs	r1, #4
 184 0042 8B48     		ldr	r0, .L25+12
 185 0044 FFF7FEFF 		bl	off_squeaker
 186              	.LVL1:
 187              	.L18:
ARM GAS  /tmp/ccvLDpwd.s 			page 9


 277:Core/Src/stm32f0xx_it.c ****   }
 278:Core/Src/stm32f0xx_it.c ****   
 279:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 280:Core/Src/stm32f0xx_it.c ****   HAL_IncTick();
 188              		.loc 1 280 3 view .LVU25
 189 0048 FFF7FEFF 		bl	HAL_IncTick
 190              	.LVL2:
 281:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 282:Core/Src/stm32f0xx_it.c **** 
 283:Core/Src/stm32f0xx_it.c **** 
 284:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 285:Core/Src/stm32f0xx_it.c **** }
 191              		.loc 1 285 1 is_stmt 0 view .LVU26
 192 004c 20B0     		add	sp, sp, #128
 193              		@ sp needed
 194 004e E0BC     		pop	{r5, r6, r7}
 195 0050 BA46     		mov	r10, r7
 196 0052 B146     		mov	r9, r6
 197 0054 A846     		mov	r8, r5
 198 0056 F0BD     		pop	{r4, r5, r6, r7, pc}
 199              	.L8:
 193:Core/Src/stm32f0xx_it.c **** 	{
 200              		.loc 1 193 7 is_stmt 1 view .LVU27
 193:Core/Src/stm32f0xx_it.c **** 	{
 201              		.loc 1 193 9 is_stmt 0 view .LVU28
 202 0058 0029     		cmp	r1, #0
 203 005a EDD0     		beq	.L9
 195:Core/Src/stm32f0xx_it.c **** 		{
 204              		.loc 1 195 3 is_stmt 1 view .LVU29
 205              	.LVL3:
 206              	.LBB13:
 207              	.LBI13:
 208              		.file 2 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @file    stm32f0xx_ll_gpio.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #ifndef __STM32F0xx_LL_GPIO_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define __STM32F0xx_LL_GPIO_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #ifdef __cplusplus
ARM GAS  /tmp/ccvLDpwd.s 			page 10


  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** typedef struct
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 11


  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS_0 /*!< Select pin 0 */
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS_1 /*!< Select pin 1 */
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS_2 /*!< Select pin 2 */
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS_3 /*!< Select pin 3 */
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS_4 /*!< Select pin 4 */
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS_5 /*!< Select pin 5 */
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS_6 /*!< Select pin 6 */
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS_7 /*!< Select pin 7 */
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS_8 /*!< Select pin 8 */
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS_9 /*!< Select pin 9 */
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS_10 /*!< Select pin 10 */
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS_11 /*!< Select pin 11 */
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS_12 /*!< Select pin 12 */
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS_13 /*!< Select pin 13 */
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS_14 /*!< Select pin 14 */
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS_15 /*!< Select pin 15 */
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS_0 | GPIO_BSRR_BS_1  | GPIO_BSRR_BS_2  | \
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                            GPIO_BSRR_BS_3  | GPIO_BSRR_BS_4  | GPIO_BSRR_BS_5  | \
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                            GPIO_BSRR_BS_6  | GPIO_BSRR_BS_7  | GPIO_BSRR_BS_8  | \
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                            GPIO_BSRR_BS_9  | GPIO_BSRR_BS_10 | GPIO_BSRR_BS_11 | \
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                            GPIO_BSRR_BS_12 | GPIO_BSRR_BS_13 | GPIO_BSRR_BS_14 | \
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                            GPIO_BSRR_BS_15) /*!< Select all pins */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODER0_0  /*!< Select output mode */
ARM GAS  /tmp/ccvLDpwd.s 			page 12


 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODER0_1  /*!< Select alternate function mode
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODER0    /*!< Select analog mode */
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT_0 /*!< Select open-drain as output type *
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEEDR0_0 /*!< Select I/O medium output sp
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEEDR0   /*!< Select I/O high output spee
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_HIGH
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPDR0_0 /*!< Select I/O pull up */
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPDR0_1 /*!< Select I/O pull down */
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 13


 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Register value
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  /tmp/ccvLDpwd.s 			page 14


 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0)) / (Pin * Pin));
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
ARM GAS  /tmp/ccvLDpwd.s 			page 15


 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccvLDpwd.s 			page 16


 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) / Pin);
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
ARM GAS  /tmp/ccvLDpwd.s 			page 17


 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0)) / (Pin * Pin));
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
ARM GAS  /tmp/ccvLDpwd.s 			page 18


 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0)) / (Pin * Pin));
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF7 depending on target.
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
ARM GAS  /tmp/ccvLDpwd.s 			page 19


 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****              ((((Pin * Pin) * Pin) * Pin) * Alternate));
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                              ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0)) / (((Pin * Pin) * Pi
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF7 depending on target.
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
ARM GAS  /tmp/ccvLDpwd.s 			page 20


 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFR
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****              (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF7 depending on target.
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                              (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AF
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****                                  (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)));
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         next reset.
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         (control and alternate function registers).
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
ARM GAS  /tmp/ccvLDpwd.s 			page 21


 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   __IO uint32_t temp;
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   (void) temp;
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return 1 if all pins passed as parameter, of a dedicated port, are locked. else Return 
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll LCKR         LCKy          LL_GPIO_IsPinLocked
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsPinLocked(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (READ_BIT(GPIOx->LCKR, PinMask) == (PinMask));
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return 1 if one of the pin of a dedicated port is locked. else return 0.
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_IsAnyPinLocked
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccvLDpwd.s 			page 22


 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsAnyPinLocked(GPIO_TypeDef *GPIOx)
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (READ_BIT(GPIOx->LCKR, GPIO_LCKR_LCKK) == (GPIO_LCKR_LCKK));
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @}
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Data_Access Data Access
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @{
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return full input data register value for a dedicated port.
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Input data register value of port
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_REG(GPIOx->IDR));
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return if input data level for several pins of dedicated port is high or low.
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_IsInputPinSet
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 209              		.loc 2 758 26 view .LVU30
 210              	.LBB14:
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 211              		.loc 2 760 3 view .LVU31
 212              		.loc 2 760 11 is_stmt 0 view .LVU32
 213 005c 9022     		movs	r2, #144
ARM GAS  /tmp/ccvLDpwd.s 			page 23


 214 005e D205     		lsls	r2, r2, #23
 215 0060 1269     		ldr	r2, [r2, #16]
 216              	.LVL4:
 217              		.loc 2 760 11 view .LVU33
 218              	.LBE14:
 219              	.LBE13:
 195:Core/Src/stm32f0xx_it.c **** 		{
 220              		.loc 1 195 5 view .LVU34
 221 0062 1207     		lsls	r2, r2, #28
 222 0064 11D4     		bmi	.L10
 197:Core/Src/stm32f0xx_it.c **** 			{
 223              		.loc 1 197 4 is_stmt 1 view .LVU35
 197:Core/Src/stm32f0xx_it.c **** 			{
 224              		.loc 1 197 6 is_stmt 0 view .LVU36
 225 0066 9B07     		lsls	r3, r3, #30
 226 0068 E6D4     		bmi	.L9
 199:Core/Src/stm32f0xx_it.c ****         {
 227              		.loc 1 199 9 is_stmt 1 view .LVU37
 199:Core/Src/stm32f0xx_it.c ****         {
 228              		.loc 1 199 17 is_stmt 0 view .LVU38
 229 006a 804B     		ldr	r3, .L25+8
 230 006c 1B78     		ldrb	r3, [r3]
 199:Core/Src/stm32f0xx_it.c ****         {
 231              		.loc 1 199 11 view .LVU39
 232 006e 012B     		cmp	r3, #1
 233 0070 07D0     		beq	.L23
 205:Core/Src/stm32f0xx_it.c ****         }
 234              		.loc 1 205 11 is_stmt 1 view .LVU40
 205:Core/Src/stm32f0xx_it.c ****         }
 235              		.loc 1 205 16 is_stmt 0 view .LVU41
 236 0072 7E4B     		ldr	r3, .L25+8
 237 0074 0122     		movs	r2, #1
 238 0076 1A70     		strb	r2, [r3]
 239              	.L12:
 207:Core/Src/stm32f0xx_it.c **** 			}
 240              		.loc 1 207 5 is_stmt 1 view .LVU42
 207:Core/Src/stm32f0xx_it.c **** 			}
 241              		.loc 1 207 19 is_stmt 0 view .LVU43
 242 0078 0223     		movs	r3, #2
 243 007a 1843     		orrs	r0, r3
 244 007c 794B     		ldr	r3, .L25
 245 007e 1870     		strb	r0, [r3]
 246 0080 DAE7     		b	.L9
 247              	.L23:
 201:Core/Src/stm32f0xx_it.c ****         }
 248              		.loc 1 201 11 is_stmt 1 view .LVU44
 201:Core/Src/stm32f0xx_it.c ****         }
 249              		.loc 1 201 16 is_stmt 0 view .LVU45
 250 0082 7A4B     		ldr	r3, .L25+8
 251 0084 0222     		movs	r2, #2
 252 0086 1A70     		strb	r2, [r3]
 253 0088 F6E7     		b	.L12
 254              	.L10:
 212:Core/Src/stm32f0xx_it.c **** 			{
 255              		.loc 1 212 4 is_stmt 1 view .LVU46
 212:Core/Src/stm32f0xx_it.c **** 			{
 256              		.loc 1 212 6 is_stmt 0 view .LVU47
ARM GAS  /tmp/ccvLDpwd.s 			page 24


 257 008a 5B07     		lsls	r3, r3, #29
 258 008c D4D4     		bmi	.L9
 215:Core/Src/stm32f0xx_it.c **** 				button_status = button_status | BUTTON_UNPUSHED;
 259              		.loc 1 215 5 is_stmt 1 view .LVU48
 215:Core/Src/stm32f0xx_it.c **** 				button_status = button_status | BUTTON_UNPUSHED;
 260              		.loc 1 215 19 is_stmt 0 view .LVU49
 261 008e 0323     		movs	r3, #3
 262 0090 9843     		bics	r0, r3
 263 0092 744B     		ldr	r3, .L25
 264 0094 1870     		strb	r0, [r3]
 216:Core/Src/stm32f0xx_it.c **** 			}
 265              		.loc 1 216 5 is_stmt 1 view .LVU50
 216:Core/Src/stm32f0xx_it.c **** 			}
 266              		.loc 1 216 19 is_stmt 0 view .LVU51
 267 0096 0422     		movs	r2, #4
 268 0098 1043     		orrs	r0, r2
 269 009a 1870     		strb	r0, [r3]
 270 009c CCE7     		b	.L9
 271              	.L22:
 272              	.LBB15:
 227:Core/Src/stm32f0xx_it.c ****     double phi = 0;
 273              		.loc 1 227 5 is_stmt 1 view .LVU52
 227:Core/Src/stm32f0xx_it.c ****     double phi = 0;
 274              		.loc 1 227 12 is_stmt 0 view .LVU53
 275 009e 0024     		movs	r4, #0
 276 00a0 0025     		movs	r5, #0
 277 00a2 1494     		str	r4, [sp, #80]
 278 00a4 1595     		str	r5, [sp, #84]
 228:Core/Src/stm32f0xx_it.c ****     double teta = 0;
 279              		.loc 1 228 5 is_stmt 1 view .LVU54
 228:Core/Src/stm32f0xx_it.c ****     double teta = 0;
 280              		.loc 1 228 12 is_stmt 0 view .LVU55
 281 00a6 1694     		str	r4, [sp, #88]
 282 00a8 1795     		str	r5, [sp, #92]
 229:Core/Src/stm32f0xx_it.c **** 
 283              		.loc 1 229 5 is_stmt 1 view .LVU56
 229:Core/Src/stm32f0xx_it.c **** 
 284              		.loc 1 229 12 is_stmt 0 view .LVU57
 285 00aa 1894     		str	r4, [sp, #96]
 286 00ac 1995     		str	r5, [sp, #100]
 231:Core/Src/stm32f0xx_it.c ****     phi = 0;
 287              		.loc 1 231 5 is_stmt 1 view .LVU58
 232:Core/Src/stm32f0xx_it.c ****     teta = 0;
 288              		.loc 1 232 5 view .LVU59
 233:Core/Src/stm32f0xx_it.c **** 
 289              		.loc 1 233 5 view .LVU60
 235:Core/Src/stm32f0xx_it.c ****     squeaker_set_frik(&htim1, 4, 9000);
 290              		.loc 1 235 5 view .LVU61
 291 00ae 18AB     		add	r3, sp, #96
 292 00b0 16AA     		add	r2, sp, #88
 293 00b2 14A9     		add	r1, sp, #80
 294 00b4 6F48     		ldr	r0, .L25+16
 295 00b6 FFF7FEFF 		bl	giro_read_angls
 296              	.LVL5:
 236:Core/Src/stm32f0xx_it.c **** 
 297              		.loc 1 236 5 view .LVU62
 298 00ba 0022     		movs	r2, #0
ARM GAS  /tmp/ccvLDpwd.s 			page 25


 299 00bc 6E4B     		ldr	r3, .L25+20
 300 00be 0421     		movs	r1, #4
 301 00c0 6B48     		ldr	r0, .L25+12
 302 00c2 FFF7FEFF 		bl	squeaker_set_frik
 303              	.LVL6:
 238:Core/Src/stm32f0xx_it.c **** 		
 304              		.loc 1 238 5 view .LVU63
 305              	.LBB16:
 306              	.LBI16:
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Write output data register for the port.
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  PortValue Level value for each pin of the port
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval None
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   WRITE_REG(GPIOx->ODR, PortValue);
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** 
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** /**
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @brief  Return full output data register value for a dedicated port.
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   * @retval Output data register value of port
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   */
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
 307              		.loc 2 781 26 view .LVU64
 308              	.LBB17:
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h ****   return (uint32_t)(READ_REG(GPIOx->ODR));
 309              		.loc 2 783 3 view .LVU65
 310              		.loc 2 783 10 is_stmt 0 view .LVU66
 311 00c6 6D4B     		ldr	r3, .L25+24
 312 00c8 5B69     		ldr	r3, [r3, #20]
 313              	.LVL7:
 314              		.loc 2 783 10 view .LVU67
 315              	.LBE17:
 316              	.LBE16:
 238:Core/Src/stm32f0xx_it.c **** 		
 317              		.loc 1 238 14 view .LVU68
 318 00ca 9BB2     		uxth	r3, r3
 319              	.LVL8:
 240:Core/Src/stm32f0xx_it.c **** 
 320              		.loc 1 240 3 is_stmt 1 view .LVU69
 240:Core/Src/stm32f0xx_it.c **** 
 321              		.loc 1 240 12 is_stmt 0 view .LVU70
 322 00cc 6C4A     		ldr	r2, .L25+28
 323 00ce 1340     		ands	r3, r2
 324              	.LVL9:
 240:Core/Src/stm32f0xx_it.c **** 
 325              		.loc 1 240 12 view .LVU71
 326 00d0 9946     		mov	r9, r3
 327              	.LVL10:
ARM GAS  /tmp/ccvLDpwd.s 			page 26


 242:Core/Src/stm32f0xx_it.c ****     double servo_tang = 0;
 328              		.loc 1 242 5 is_stmt 1 view .LVU72
 243:Core/Src/stm32f0xx_it.c ****     double servo_kren = 0;
 329              		.loc 1 243 5 view .LVU73
 244:Core/Src/stm32f0xx_it.c **** 
 330              		.loc 1 244 5 view .LVU74
 246:Core/Src/stm32f0xx_it.c ****     teta = -teta*POPRAVKA;  
 331              		.loc 1 246 5 view .LVU75
 246:Core/Src/stm32f0xx_it.c ****     teta = -teta*POPRAVKA;  
 332              		.loc 1 246 14 is_stmt 0 view .LVU76
 333 00d2 6C4A     		ldr	r2, .L25+32
 334 00d4 6C4B     		ldr	r3, .L25+36
 335 00d6 1498     		ldr	r0, [sp, #80]
 336 00d8 1599     		ldr	r1, [sp, #84]
 337 00da FFF7FEFF 		bl	__aeabi_dmul
 338              	.LVL11:
 339 00de 0200     		movs	r2, r0
 340 00e0 0B00     		movs	r3, r1
 246:Core/Src/stm32f0xx_it.c ****     teta = -teta*POPRAVKA;  
 341              		.loc 1 246 9 view .LVU77
 342 00e2 0A92     		str	r2, [sp, #40]
 343 00e4 0B93     		str	r3, [sp, #44]
 344 00e6 1492     		str	r2, [sp, #80]
 345 00e8 1593     		str	r3, [sp, #84]
 247:Core/Src/stm32f0xx_it.c ****     phi = phi*POPRAVKA;
 346              		.loc 1 247 5 is_stmt 1 view .LVU78
 247:Core/Src/stm32f0xx_it.c ****     phi = phi*POPRAVKA;
 347              		.loc 1 247 17 is_stmt 0 view .LVU79
 348 00ea 664A     		ldr	r2, .L25+32
 349 00ec 664B     		ldr	r3, .L25+36
 350 00ee 1898     		ldr	r0, [sp, #96]
 351 00f0 199E     		ldr	r6, [sp, #100]
 352 00f2 8027     		movs	r7, #128
 353 00f4 3F06     		lsls	r7, r7, #24
 354 00f6 BC46     		mov	ip, r7
 355 00f8 6644     		add	r6, r6, ip
 356 00fa 3100     		movs	r1, r6
 357 00fc FFF7FEFF 		bl	__aeabi_dmul
 358              	.LVL12:
 359 0100 0600     		movs	r6, r0
 360 0102 0F00     		movs	r7, r1
 247:Core/Src/stm32f0xx_it.c ****     phi = phi*POPRAVKA;
 361              		.loc 1 247 10 view .LVU80
 362 0104 1896     		str	r6, [sp, #96]
 363 0106 1997     		str	r7, [sp, #100]
 248:Core/Src/stm32f0xx_it.c **** 
 364              		.loc 1 248 5 is_stmt 1 view .LVU81
 248:Core/Src/stm32f0xx_it.c **** 
 365              		.loc 1 248 14 is_stmt 0 view .LVU82
 366 0108 5E4A     		ldr	r2, .L25+32
 367 010a 5F4B     		ldr	r3, .L25+36
 368 010c 1698     		ldr	r0, [sp, #88]
 369 010e 1799     		ldr	r1, [sp, #92]
 370 0110 FFF7FEFF 		bl	__aeabi_dmul
 371              	.LVL13:
 248:Core/Src/stm32f0xx_it.c **** 
 372              		.loc 1 248 9 view .LVU83
ARM GAS  /tmp/ccvLDpwd.s 			page 27


 373 0114 1690     		str	r0, [sp, #88]
 374 0116 1791     		str	r1, [sp, #92]
 250:Core/Src/stm32f0xx_it.c ****     app = Rotate(app, psi, teta, phi);
 375              		.loc 1 250 5 is_stmt 1 view .LVU84
 250:Core/Src/stm32f0xx_it.c ****     app = Rotate(app, psi, teta, phi);
 376              		.loc 1 250 13 is_stmt 0 view .LVU85
 377 0118 5C4B     		ldr	r3, .L25+40
 378 011a 9846     		mov	r8, r3
 379 011c 0890     		str	r0, [sp, #32]
 380 011e 0991     		str	r1, [sp, #36]
 381 0120 0696     		str	r6, [sp, #24]
 382 0122 0797     		str	r7, [sp, #28]
 383 0124 0A9A     		ldr	r2, [sp, #40]
 384 0126 0B9B     		ldr	r3, [sp, #44]
 385 0128 0492     		str	r2, [sp, #16]
 386 012a 0593     		str	r3, [sp, #20]
 387 012c 4146     		mov	r1, r8
 388 012e 0831     		adds	r1, r1, #8
 389 0130 1022     		movs	r2, #16
 390 0132 6846     		mov	r0, sp
 391 0134 FFF7FEFF 		bl	memcpy
 392              	.LVL14:
 393 0138 4346     		mov	r3, r8
 394 013a 1A68     		ldr	r2, [r3]
 395 013c 5B68     		ldr	r3, [r3, #4]
 396 013e 0EA8     		add	r0, sp, #56
 397 0140 FFF7FEFF 		bl	Rotate
 398              	.LVL15:
 399 0144 1822     		movs	r2, #24
 400 0146 0EA9     		add	r1, sp, #56
 401 0148 4046     		mov	r0, r8
 402 014a FFF7FEFF 		bl	memcpy
 403              	.LVL16:
 251:Core/Src/stm32f0xx_it.c ****     
 404              		.loc 1 251 5 is_stmt 1 view .LVU86
 251:Core/Src/stm32f0xx_it.c ****     
 405              		.loc 1 251 11 is_stmt 0 view .LVU87
 406 014e 504B     		ldr	r3, .L25+44
 407 0150 9A46     		mov	r10, r3
 408 0152 169A     		ldr	r2, [sp, #88]
 409 0154 179B     		ldr	r3, [sp, #92]
 410 0156 0892     		str	r2, [sp, #32]
 411 0158 0993     		str	r3, [sp, #36]
 412 015a 189A     		ldr	r2, [sp, #96]
 413 015c 199B     		ldr	r3, [sp, #100]
 414 015e 0692     		str	r2, [sp, #24]
 415 0160 0793     		str	r3, [sp, #28]
 416 0162 149A     		ldr	r2, [sp, #80]
 417 0164 159B     		ldr	r3, [sp, #84]
 418 0166 0492     		str	r2, [sp, #16]
 419 0168 0593     		str	r3, [sp, #20]
 420 016a 5146     		mov	r1, r10
 421 016c 0831     		adds	r1, r1, #8
 422 016e 1022     		movs	r2, #16
 423 0170 6846     		mov	r0, sp
 424 0172 FFF7FEFF 		bl	memcpy
 425              	.LVL17:
ARM GAS  /tmp/ccvLDpwd.s 			page 28


 426 0176 5346     		mov	r3, r10
 427 0178 1A68     		ldr	r2, [r3]
 428 017a 5B68     		ldr	r3, [r3, #4]
 429 017c 0EA8     		add	r0, sp, #56
 430 017e FFF7FEFF 		bl	Rotate
 431              	.LVL18:
 432 0182 1822     		movs	r2, #24
 433 0184 0EA9     		add	r1, sp, #56
 434 0186 5046     		mov	r0, r10
 435 0188 FFF7FEFF 		bl	memcpy
 436              	.LVL19:
 253:Core/Src/stm32f0xx_it.c ****     servo_tang = -asin(front.z);
 437              		.loc 1 253 5 is_stmt 1 view .LVU88
 253:Core/Src/stm32f0xx_it.c ****     servo_tang = -asin(front.z);
 438              		.loc 1 253 18 is_stmt 0 view .LVU89
 439 018c 4346     		mov	r3, r8
 440 018e 1A68     		ldr	r2, [r3]
 441 0190 5B68     		ldr	r3, [r3, #4]
 442 0192 4146     		mov	r1, r8
 443 0194 8868     		ldr	r0, [r1, #8]
 444 0196 C968     		ldr	r1, [r1, #12]
 445 0198 FFF7FEFF 		bl	__aeabi_ddiv
 446              	.LVL20:
 447 019c FFF7FEFF 		bl	atan
 448              	.LVL21:
 449 01a0 0C90     		str	r0, [sp, #48]
 450 01a2 0D91     		str	r1, [sp, #52]
 451              	.LVL22:
 254:Core/Src/stm32f0xx_it.c ****     
 452              		.loc 1 254 5 is_stmt 1 view .LVU90
 254:Core/Src/stm32f0xx_it.c ****     
 453              		.loc 1 254 19 is_stmt 0 view .LVU91
 454 01a4 4346     		mov	r3, r8
 455 01a6 1869     		ldr	r0, [r3, #16]
 456 01a8 5969     		ldr	r1, [r3, #20]
 457              	.LVL23:
 254:Core/Src/stm32f0xx_it.c ****     
 458              		.loc 1 254 19 view .LVU92
 459 01aa FFF7FEFF 		bl	asin
 460              	.LVL24:
 461 01ae 0600     		movs	r6, r0
 462 01b0 0F00     		movs	r7, r1
 463              	.LVL25:
 257:Core/Src/stm32f0xx_it.c ****     
 464              		.loc 1 257 5 is_stmt 1 view .LVU93
 257:Core/Src/stm32f0xx_it.c ****     
 465              		.loc 1 257 17 is_stmt 0 view .LVU94
 466 01b2 384A     		ldr	r2, .L25+48
 467 01b4 4146     		mov	r1, r8
 468 01b6 1AAB     		add	r3, sp, #104
 469 01b8 1800     		movs	r0, r3
 470 01ba FFF7FEFF 		bl	Vector_Vector_Mul
 471              	.LVL26:
 259:Core/Src/stm32f0xx_it.c ****     
 472              		.loc 1 259 5 is_stmt 1 view .LVU95
 259:Core/Src/stm32f0xx_it.c ****     
 473              		.loc 1 259 23 is_stmt 0 view .LVU96
ARM GAS  /tmp/ccvLDpwd.s 			page 29


 474 01be 1AA9     		add	r1, sp, #104
 475 01c0 5046     		mov	r0, r10
 476 01c2 FFF7FEFF 		bl	Vector_Scalar_Mul
 477              	.LVL27:
 478 01c6 0A90     		str	r0, [sp, #40]
 479 01c8 0B91     		str	r1, [sp, #44]
 259:Core/Src/stm32f0xx_it.c ****     
 480              		.loc 1 259 52 view .LVU97
 481 01ca 1AA9     		add	r1, sp, #104
 482 01cc 0800     		movs	r0, r1
 483 01ce FFF7FEFF 		bl	Vector_Scalar_Mul
 484              	.LVL28:
 485 01d2 FFF7FEFF 		bl	sqrt
 486              	.LVL29:
 487 01d6 0200     		movs	r2, r0
 488 01d8 0B00     		movs	r3, r1
 259:Core/Src/stm32f0xx_it.c ****     
 489              		.loc 1 259 18 view .LVU98
 490 01da 0A98     		ldr	r0, [sp, #40]
 491 01dc 0B99     		ldr	r1, [sp, #44]
 492 01de FFF7FEFF 		bl	__aeabi_ddiv
 493              	.LVL30:
 494 01e2 FFF7FEFF 		bl	asin
 495              	.LVL31:
 496 01e6 0A90     		str	r0, [sp, #40]
 497 01e8 0B91     		str	r1, [sp, #44]
 498              	.LVL32:
 262:Core/Src/stm32f0xx_it.c **** 
 499              		.loc 1 262 5 is_stmt 1 view .LVU99
 500 01ea 2B4A     		ldr	r2, .L25+52
 501 01ec 2B4B     		ldr	r3, .L25+56
 502 01ee 0C98     		ldr	r0, [sp, #48]
 503 01f0 0D99     		ldr	r1, [sp, #52]
 504              	.LVL33:
 262:Core/Src/stm32f0xx_it.c **** 
 505              		.loc 1 262 5 is_stmt 0 view .LVU100
 506 01f2 FFF7FEFF 		bl	__aeabi_dadd
 507              	.LVL34:
 508 01f6 0C90     		str	r0, [sp, #48]
 509 01f8 0D91     		str	r1, [sp, #52]
 510              	.LVL35:
 262:Core/Src/stm32f0xx_it.c **** 
 511              		.loc 1 262 5 view .LVU101
 512 01fa 274A     		ldr	r2, .L25+52
 513 01fc 274B     		ldr	r3, .L25+56
 514 01fe 0A98     		ldr	r0, [sp, #40]
 515 0200 0B99     		ldr	r1, [sp, #44]
 516 0202 FFF7FEFF 		bl	__aeabi_dadd
 517              	.LVL36:
 518 0206 0290     		str	r0, [sp, #8]
 519 0208 0391     		str	r1, [sp, #12]
 520 020a 3200     		movs	r2, r6
 521 020c 3B00     		movs	r3, r7
 522 020e 2248     		ldr	r0, .L25+52
 523 0210 2249     		ldr	r1, .L25+56
 524 0212 FFF7FEFF 		bl	__aeabi_dsub
 525              	.LVL37:
ARM GAS  /tmp/ccvLDpwd.s 			page 30


 526 0216 0090     		str	r0, [sp]
 527 0218 0191     		str	r1, [sp, #4]
 528 021a 0C9A     		ldr	r2, [sp, #48]
 529 021c 0D9B     		ldr	r3, [sp, #52]
 530 021e 2048     		ldr	r0, .L25+60
 531 0220 FFF7FEFF 		bl	set_3_servo
 532              	.LVL38:
 264:Core/Src/stm32f0xx_it.c **** 		{
 533              		.loc 1 264 5 is_stmt 1 view .LVU102
 264:Core/Src/stm32f0xx_it.c **** 		{
 534              		.loc 1 264 7 is_stmt 0 view .LVU103
 535 0224 2200     		movs	r2, r4
 536 0226 2B00     		movs	r3, r5
 537 0228 3000     		movs	r0, r6
 538 022a 3900     		movs	r1, r7
 539 022c FFF7FEFF 		bl	__aeabi_dcmplt
 540              	.LVL39:
 541 0230 0028     		cmp	r0, #0
 542 0232 0DD1     		bne	.L24
 268:Core/Src/stm32f0xx_it.c **** 		{
 543              		.loc 1 268 8 is_stmt 1 view .LVU104
 268:Core/Src/stm32f0xx_it.c **** 		{
 544              		.loc 1 268 11 is_stmt 0 view .LVU105
 545 0234 0022     		movs	r2, #0
 546 0236 0023     		movs	r3, #0
 547 0238 3000     		movs	r0, r6
 548 023a 3900     		movs	r1, r7
 549 023c FFF7FEFF 		bl	__aeabi_dcmpgt
 550              	.LVL40:
 551 0240 0028     		cmp	r0, #0
 552 0242 0AD0     		beq	.L16
 270:Core/Src/stm32f0xx_it.c **** 		}
 553              		.loc 1 270 4 is_stmt 1 view .LVU106
 270:Core/Src/stm32f0xx_it.c **** 		}
 554              		.loc 1 270 13 is_stmt 0 view .LVU107
 555 0244 8023     		movs	r3, #128
 556 0246 9B00     		lsls	r3, r3, #2
 557 0248 4A46     		mov	r2, r9
 558 024a 1A43     		orrs	r2, r3
 559 024c 9146     		mov	r9, r2
 560              	.LVL41:
 270:Core/Src/stm32f0xx_it.c **** 		}
 561              		.loc 1 270 13 view .LVU108
 562 024e 04E0     		b	.L16
 563              	.L24:
 266:Core/Src/stm32f0xx_it.c **** 		}
 564              		.loc 1 266 4 is_stmt 1 view .LVU109
 266:Core/Src/stm32f0xx_it.c **** 		}
 565              		.loc 1 266 13 is_stmt 0 view .LVU110
 566 0250 8023     		movs	r3, #128
 567 0252 5B00     		lsls	r3, r3, #1
 568 0254 4A46     		mov	r2, r9
 569 0256 1A43     		orrs	r2, r3
 570 0258 9146     		mov	r9, r2
 571              	.LVL42:
 572              	.L16:
 272:Core/Src/stm32f0xx_it.c ****   }
ARM GAS  /tmp/ccvLDpwd.s 			page 31


 573              		.loc 1 272 5 is_stmt 1 view .LVU111
 574              	.LBB18:
 575              	.LBI18:
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** {
 576              		.loc 2 770 22 view .LVU112
 577              	.LBB19:
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 578              		.loc 2 772 3 view .LVU113
 579 025a 084B     		ldr	r3, .L25+24
 580 025c 4A46     		mov	r2, r9
 581 025e 5A61     		str	r2, [r3, #20]
 582              	.LVL43:
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_gpio.h **** }
 583              		.loc 2 772 3 is_stmt 0 view .LVU114
 584              	.LBE19:
 585              	.LBE18:
 586              	.LBE15:
 587 0260 F2E6     		b	.L18
 588              	.L26:
 589 0262 C046     		.align	2
 590              	.L25:
 591 0264 00000000 		.word	button_status
 592 0268 00000000 		.word	button_delay_counter
 593 026c 00000000 		.word	.LANCHOR0
 594 0270 00000000 		.word	htim1
 595 0274 00000000 		.word	hi2c1
 596 0278 0094C140 		.word	1086428160
 597 027c 00080048 		.word	1207961600
 598 0280 FFFCFFFF 		.word	-769
 599 0284 7B14AE47 		.word	1202590843
 600 0288 E17A743F 		.word	1064598241
 601 028c 00000000 		.word	.LANCHOR1
 602 0290 00000000 		.word	.LANCHOR2
 603 0294 00000000 		.word	.LANCHOR3
 604 0298 1F85EB51 		.word	1374389535
 605 029c B81EF93F 		.word	1073290936
 606 02a0 00000000 		.word	htim2
 607              		.cfi_endproc
 608              	.LFE460:
 610              		.section	.text.EXTI2_3_IRQHandler,"ax",%progbits
 611              		.align	1
 612              		.global	EXTI2_3_IRQHandler
 613              		.syntax unified
 614              		.code	16
 615              		.thumb_func
 617              	EXTI2_3_IRQHandler:
 618              	.LFB461:
 286:Core/Src/stm32f0xx_it.c **** 
 287:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 288:Core/Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 289:Core/Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 290:Core/Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 291:Core/Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 292:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 293:Core/Src/stm32f0xx_it.c **** 
 294:Core/Src/stm32f0xx_it.c **** /**
 295:Core/Src/stm32f0xx_it.c ****   * @brief This function handles EXTI line 2 and 3 interrupts.
ARM GAS  /tmp/ccvLDpwd.s 			page 32


 296:Core/Src/stm32f0xx_it.c ****   */
 297:Core/Src/stm32f0xx_it.c **** void EXTI2_3_IRQHandler(void)
 298:Core/Src/stm32f0xx_it.c **** {
 619              		.loc 1 298 1 is_stmt 1 view -0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623 0000 10B5     		push	{r4, lr}
 624              	.LCFI3:
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
 299:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI2_3_IRQn 0 */
 300:Core/Src/stm32f0xx_it.c ****   if(!(button_status & BUTTON_PUSH))
 628              		.loc 1 300 3 view .LVU116
 629              		.loc 1 300 22 is_stmt 0 view .LVU117
 630 0002 054B     		ldr	r3, .L29
 631 0004 1B78     		ldrb	r3, [r3]
 632              		.loc 1 300 5 view .LVU118
 633 0006 DB07     		lsls	r3, r3, #31
 634 0008 02D4     		bmi	.L28
 301:Core/Src/stm32f0xx_it.c ****     {
 302:Core/Src/stm32f0xx_it.c ****         button_status = BUTTON_PUSH;
 635              		.loc 1 302 9 is_stmt 1 view .LVU119
 636              		.loc 1 302 23 is_stmt 0 view .LVU120
 637 000a 034B     		ldr	r3, .L29
 638 000c 0122     		movs	r2, #1
 639 000e 1A70     		strb	r2, [r3]
 640              	.L28:
 303:Core/Src/stm32f0xx_it.c ****     } 
 304:Core/Src/stm32f0xx_it.c ****   /* USER CODE END EXTI2_3_IRQn 0 */
 305:Core/Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 641              		.loc 1 305 3 is_stmt 1 view .LVU121
 642 0010 0820     		movs	r0, #8
 643 0012 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 644              	.LVL44:
 306:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI2_3_IRQn 1 */
 307:Core/Src/stm32f0xx_it.c **** 
 308:Core/Src/stm32f0xx_it.c ****   /* USER CODE END EXTI2_3_IRQn 1 */
 309:Core/Src/stm32f0xx_it.c **** }
 645              		.loc 1 309 1 is_stmt 0 view .LVU122
 646              		@ sp needed
 647 0016 10BD     		pop	{r4, pc}
 648              	.L30:
 649              		.align	2
 650              	.L29:
 651 0018 00000000 		.word	button_status
 652              		.cfi_endproc
 653              	.LFE461:
 655              		.section	.text.USART1_IRQHandler,"ax",%progbits
 656              		.align	1
 657              		.global	USART1_IRQHandler
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 662              	USART1_IRQHandler:
 663              	.LFB462:
ARM GAS  /tmp/ccvLDpwd.s 			page 33


 310:Core/Src/stm32f0xx_it.c **** 
 311:Core/Src/stm32f0xx_it.c **** /**
 312:Core/Src/stm32f0xx_it.c ****   * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI li
 313:Core/Src/stm32f0xx_it.c ****   */
 314:Core/Src/stm32f0xx_it.c **** void USART1_IRQHandler(void)
 315:Core/Src/stm32f0xx_it.c **** {
 664              		.loc 1 315 1 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668 0000 10B5     		push	{r4, lr}
 669              	.LCFI4:
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 4, -8
 672              		.cfi_offset 14, -4
 673              	.L32:
 316:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 317:Core/Src/stm32f0xx_it.c ****   while (!LL_USART_IsActiveFlag_TXE(USART1));
 674              		.loc 1 317 45 discriminator 1 view .LVU124
 675              		.loc 1 317 9 discriminator 1 view .LVU125
 676              	.LVL45:
 677              	.LBB20:
 678              	.LBI20:
 679              		.file 3 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @file    stm32f0xx_ll_usart.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #ifndef STM32F0xx_LL_USART_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define STM32F0xx_LL_USART_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 34


  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5) 
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** typedef struct
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
ARM GAS  /tmp/ccvLDpwd.s 			page 35


  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** } LL_USART_InitTypeDef;
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** typedef struct
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
ARM GAS  /tmp/ccvLDpwd.s 			page 36


 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error cle
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error cl
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_NCF                        USART_ICR_NCF                 /*!< Noise error dete
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error cl
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined USART_LIN_SUPPORT
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS clear flag *
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined USART_SMARTCARD_SUPPORT
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block cle
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined USART_LIN_SUPPORT
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined USART_SMARTCARD_SUPPORT
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
ARM GAS  /tmp/ccvLDpwd.s 			page 37


 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
ARM GAS  /tmp/ccvLDpwd.s 			page 38


 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_7BITS_SUPPORT)
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif/* USART_7BITS_SUPPORT */
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 39


 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 40


 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_FABR_SUPPORT)
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_FABR_SUPPORT */
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 41


 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUS)
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUS */
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 42


 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Write a value in USART register
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __REG__ Register to be written
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Read a value in USART register
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __REG__ Register to be read
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Register value
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2U)\
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                                                 + ((__BAUDRATE__)/2U))/(__BAUDRATE_
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 43


 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  USART Enable
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
ARM GAS  /tmp/ccvLDpwd.s 			page 44


 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1UL : 0UL);
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM*/
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Receiver Disable
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 45


 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Transmitter Enable
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Transmitter Disable
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         of Transmitter and Receiver
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccvLDpwd.s 			page 46


 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccvLDpwd.s 			page 47


 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_MME);
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
ARM GAS  /tmp/ccvLDpwd.s 			page 48


 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1UL : 0UL);
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Oversampling mode
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 49


 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
ARM GAS  /tmp/ccvLDpwd.s 			page 50


 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccvLDpwd.s 			page 51


1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1UL : 0UL);
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5 (*)
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5 (*)
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
ARM GAS  /tmp/ccvLDpwd.s 			page 52


1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5 (*)
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5 (*)
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5 (*)
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5 (*)
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                               uint32_t StopBits)
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
ARM GAS  /tmp/ccvLDpwd.s 			page 53


1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
ARM GAS  /tmp/ccvLDpwd.s 			page 54


1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 55


1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1UL : 0UL);
ARM GAS  /tmp/ccvLDpwd.s 			page 56


1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME (*)
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME (*)
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME (*)
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME (*)
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (*) Values not available on all devices
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccvLDpwd.s 			page 57


1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1UL : 0UL);
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         for wake up with address mark detection.
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         value and CMF flag is set on match)
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccvLDpwd.s 			page 58


1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 59


1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
ARM GAS  /tmp/ccvLDpwd.s 			page 60


1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1UL : 0UL);
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Overrun detection
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Overrun detection
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1UL : 0UL);
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
ARM GAS  /tmp/ccvLDpwd.s 			page 61


1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUS)
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUS */
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (Baud rate value != 0)
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****                                           uint32_t BaudRate)
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
ARM GAS  /tmp/ccvLDpwd.s 			page 62


1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t usartdiv;
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t brrtemp;
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     USARTx->BRR = brrtemp;
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   else
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Baud Rate
1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t usartdiv;
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   if (usartdiv == 0U)
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     /* Do not perform a division by 0 */
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     if (usartdiv != 0U)
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     {
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     }
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   else
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     {
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     }
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (brrresult);
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
ARM GAS  /tmp/ccvLDpwd.s 			page 63


1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Get Block Length value in reception
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 64


1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable IrDA mode
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable IrDA mode
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1UL : 0UL);
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 65


1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /tmp/ccvLDpwd.s 			page 66


1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1UL : 0UL);
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccvLDpwd.s 			page 67


1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1UL : 0UL);
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
ARM GAS  /tmp/ccvLDpwd.s 			page 68


1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_GT, (uint16_t)(GuardTime << USART_GTPR_GT_Pos));
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccvLDpwd.s 			page 69


2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1UL : 0UL);
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
ARM GAS  /tmp/ccvLDpwd.s 			page 70


2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable LIN mode
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable LIN mode
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccvLDpwd.s 			page 71


2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1UL : 0UL);
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 72


2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
2249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccvLDpwd.s 			page 73


2257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
2284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
2288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccvLDpwd.s 			page 74


2314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
2319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in
2320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
2325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
2350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
ARM GAS  /tmp/ccvLDpwd.s 			page 75


2371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported) bit in the USART_CR2 register,
2372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in
2373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
ARM GAS  /tmp/ccvLDpwd.s 			page 76


2428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - IREN (if Irda feature is supported) , SCEN (if Smartcard feature is supported)and HDSEL bits in
2429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported) and CLKEN bits in the USART_CR2 register,
2480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - SCEN (if Smartcard feature is supported) and IREN (if Irda feature is supported) bits in the US
2481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
ARM GAS  /tmp/ccvLDpwd.s 			page 77


2485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
2486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN));
2492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN));
2496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported) bit in the USART_CR2 register,
2536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
2537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
ARM GAS  /tmp/ccvLDpwd.s 			page 78


2542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_HDSEL));
2545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported), STOP and CLKEN bits in the USART_CR2 register,
2588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - SCEN (if Smartcard feature is supported) and HDSEL bits in the USART_CR3 register.
2589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_HDSEL));
ARM GAS  /tmp/ccvLDpwd.s 			page 79


2599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register (if LIN feature is supported),
2611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register (if Smartcard feature is supported),
2613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register (if Irda feature is supported),
2614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function (if LIN feature is suppo
2617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function (if Smartcard featu
2619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function (if Irda feature is supp
2620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         dedicated functions
2624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - LINEN (if LIN feature is supported) and CLKEN bits in the USART_CR2 register,
2636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   - IREN (if Irda feature is supported), SCEN (if Smartcard feature is supported) and HDSEL bits in
2637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
2642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_IRDA_SUPPORT)
2651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
2652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #else
2653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_HDSEL));
2654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_IRDA_SUPPORT */
2655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT*/
ARM GAS  /tmp/ccvLDpwd.s 			page 80


2656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
2660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
2664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
2675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
2686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
2691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
2697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
2708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
ARM GAS  /tmp/ccvLDpwd.s 			page 81


2713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
2719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
2723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
2724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
2728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
2730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
2741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
2745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
2746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
 680              		.loc 3 2749 26 discriminator 1 view .LVU126
 681              	.LBB21:
2750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 682              		.loc 3 2751 3 discriminator 1 view .LVU127
 683              		.loc 3 2751 12 is_stmt 0 discriminator 1 view .LVU128
 684 0002 054B     		ldr	r3, .L33
 685 0004 DB69     		ldr	r3, [r3, #28]
 686              		.loc 3 2751 75 discriminator 1 view .LVU129
 687 0006 1B06     		lsls	r3, r3, #24
 688 0008 FBD5     		bpl	.L32
 689              	.LVL46:
 690              		.loc 3 2751 75 discriminator 1 view .LVU130
 691              	.LBE21:
 692              	.LBE20:
 318:Core/Src/stm32f0xx_it.c ****   LL_USART_TransmitData8(USART1, '1');
 693              		.loc 1 318 3 is_stmt 1 view .LVU131
 694              	.LBB22:
 695              	.LBI22:
2752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
ARM GAS  /tmp/ccvLDpwd.s 			page 82


2753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
2757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
2760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
2764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
2766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
2768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
2771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
2774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
2778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1UL : 0UL);
2780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
2784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
2787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
2791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
2793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
2797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
2798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
2802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
2804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
2807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
2809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccvLDpwd.s 			page 83


2810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
2812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
2816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1UL : 0UL);
2818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
2820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
2823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
2824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
2826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
2830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1UL : 0UL);
2832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
2836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
2837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
2839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
2843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1UL : 0UL);
2845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
2849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
2850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
2854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
2856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
2860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
2861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
2865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1UL : 0UL);
ARM GAS  /tmp/ccvLDpwd.s 			page 84


2867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
2871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
2872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
2876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1UL : 0UL);
2878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
2882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
2883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
2887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1UL : 0UL);
2889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
2892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
2893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
2895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
2898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
2902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
2904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
2907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
2908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
2910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
2911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
2915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
2917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
2921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
2922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccvLDpwd.s 			page 85


2924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
2926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
2928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
2932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
2933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
2937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
2939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
2943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
2944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
2948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
2950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
2954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
2955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
2959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NCF);
2961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
2965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
2966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
2970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
2972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
2976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
2977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccvLDpwd.s 			page 86


2981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
2983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
2987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
2988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
2989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
2990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
2991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
2992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
2993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
2994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
2995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
2997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
2998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
2999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
3011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
3014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
3037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 87


3038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
3050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Character Match Flag
3053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
3060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
3063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
3064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
3078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
3079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
3081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
3085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
ARM GAS  /tmp/ccvLDpwd.s 			page 88


3095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
3100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
3101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
3105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
3111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
3112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
3116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
3118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
3122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
3123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
3127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
3129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
3133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
3134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
ARM GAS  /tmp/ccvLDpwd.s 			page 89


3152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
3165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
3178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
3180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif/* USART_LIN_SUPPORT */
3194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Error Interrupt
3196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           0: Interrupt is inhibited
3199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
3207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 90


3209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
3223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
3224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
3238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
3239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
3253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
3254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
3258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccvLDpwd.s 			page 91


3266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
3275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
3276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
3280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
3282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
3318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
ARM GAS  /tmp/ccvLDpwd.s 			page 92


3323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
3327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
3331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
3333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
3346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Error Interrupt
3349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           0: Interrupt is inhibited
3352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
3371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
3373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
3376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
3377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
3379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccvLDpwd.s 			page 93


3380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
3382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
3386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
3388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
3391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
3392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
3395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
3396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
3400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
3402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
3406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
3407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
3411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
3413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
3417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
3418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
3422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
3424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
3428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
3429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
3433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
3435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
ARM GAS  /tmp/ccvLDpwd.s 			page 94


3437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
3439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
3440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
3444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
3446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
3450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
3451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(USART_TypeDef *USARTx)
3455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE)) ? 1UL : 0UL);
3457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
3461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
3462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(USART_TypeDef *USARTx)
3466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE)) ? 1UL : 0UL);
3468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_SMARTCARD_SUPPORT)
3471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
3473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
3476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(USART_TypeDef *USARTx)
3480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE)) ? 1UL : 0UL);
3482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_SMARTCARD_SUPPORT */
3485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_LIN_SUPPORT)
3486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
3488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
3491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccvLDpwd.s 			page 95


3494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
3495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE)) ? 1UL : 0UL);
3497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_LIN_SUPPORT */
3499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
3502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
3503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
3507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
3509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
3513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
3516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
3520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE)) ? 1UL : 0UL);
3522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR1_UESM)
3525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #if defined(USART_CR3_WUFIE)
3526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from Stop Mode Interrupt is enabled or disabled.
3528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_IsEnabledIT_WKUP
3531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_WKUP(USART_TypeDef *USARTx)
3535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
3537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR3_WUFIE */
3540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** #endif /* USART_CR1_UESM */
3541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
3544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
3547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
3548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccvLDpwd.s 			page 96


3551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
3552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
3553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
3557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
3559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
3563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
3564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
3568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
3570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
3574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
3575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
3579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR)) ? 1UL : 0UL);
3581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
3585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
3586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
3590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
3592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
3596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
3597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
3601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
3603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
3607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
ARM GAS  /tmp/ccvLDpwd.s 			page 97


3608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
3612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT)) ? 1UL : 0UL);
3614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Enable DMA Disabling on Reception Error
3618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_EnableDMADeactOnRxErr
3619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMADeactOnRxErr(USART_TypeDef *USARTx)
3623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DDRE);
3625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Disable DMA Disabling on Reception Error
3629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_DisableDMADeactOnRxErr
3630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMADeactOnRxErr(USART_TypeDef *USARTx)
3634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
3636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Indicate if DMA Disabling on Reception Error is disabled
3640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll CR3          DDRE          LL_USART_IsEnabledDMADeactOnRxErr
3641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMADeactOnRxErr(USART_TypeDef *USARTx)
3645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DDRE) == (USART_CR3_DDRE)) ? 1UL : 0UL);
3647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
3651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_DMA_GetRegAddr\n
3652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_DMA_GetRegAddr
3653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Direction This parameter can be one of the following values:
3655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
3656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
3657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Address of data register
3658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
3660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   uint32_t data_reg_addr;
3662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
3664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
ARM GAS  /tmp/ccvLDpwd.s 			page 98


3665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     /* return address of TDR register */
3666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->TDR);
3667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
3668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   else
3669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   {
3670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     /* return address of RDR register */
3671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****     data_reg_addr = (uint32_t) &(USARTx->RDR);
3672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   }
3673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return data_reg_addr;
3675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @}
3679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
3682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @{
3683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
3687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData8
3688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
3690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
3692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
3694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
3698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll RDR          RDR           LL_USART_ReceiveData9
3699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
3701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
3703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
3705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** }
3706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** 
3707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** /**
3708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
3709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @rmtoll TDR          TDR           LL_USART_TransmitData8
3710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  USARTx USART Instance
3711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
3712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   * @retval None
3713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   */
3714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
 696              		.loc 3 3714 22 view .LVU132
 697              	.LBB23:
3715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h **** {
3716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usart.h ****   USARTx->TDR = Value;
 698              		.loc 3 3716 3 view .LVU133
 699              		.loc 3 3716 15 is_stmt 0 view .LVU134
 700 000a 034B     		ldr	r3, .L33
ARM GAS  /tmp/ccvLDpwd.s 			page 99


 701 000c 3122     		movs	r2, #49
 702 000e 1A85     		strh	r2, [r3, #40]
 703              	.LVL47:
 704              		.loc 3 3716 15 view .LVU135
 705              	.LBE23:
 706              	.LBE22:
 319:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 320:Core/Src/stm32f0xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 707              		.loc 1 320 3 is_stmt 1 view .LVU136
 708 0010 0248     		ldr	r0, .L33+4
 709 0012 FFF7FEFF 		bl	HAL_UART_IRQHandler
 710              	.LVL48:
 321:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 322:Core/Src/stm32f0xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 323:Core/Src/stm32f0xx_it.c **** }
 711              		.loc 1 323 1 is_stmt 0 view .LVU137
 712              		@ sp needed
 713 0016 10BD     		pop	{r4, pc}
 714              	.L34:
 715              		.align	2
 716              	.L33:
 717 0018 00380140 		.word	1073821696
 718 001c 00000000 		.word	huart1
 719              		.cfi_endproc
 720              	.LFE462:
 722              		.global	mode
 723              		.global	oz
 724              		.global	app
 725              		.global	front
 726              		.section	.data.app,"aw"
 727              		.align	3
 728              		.set	.LANCHOR2,. + 0
 731              	app:
 732 0000 00000000 		.word	0
 733 0004 00000000 		.word	0
 734 0008 00000000 		.word	0
 735 000c 0000F03F 		.word	1072693248
 736 0010 00000000 		.word	0
 737 0014 00000000 		.word	0
 738              		.section	.data.front,"aw"
 739              		.align	3
 740              		.set	.LANCHOR1,. + 0
 743              	front:
 744 0000 00000000 		.word	0
 745 0004 0000F03F 		.word	1072693248
 746 0008 00000000 		.word	0
 747 000c 00000000 		.word	0
 748 0010 00000000 		.word	0
 749 0014 00000000 		.word	0
 750              		.section	.data.mode,"aw"
 751              		.set	.LANCHOR0,. + 0
 754              	mode:
 755 0000 01       		.byte	1
 756              		.section	.data.oz,"aw"
 757              		.align	3
 758              		.set	.LANCHOR3,. + 0
 761              	oz:
ARM GAS  /tmp/ccvLDpwd.s 			page 100


 762 0000 00000000 		.word	0
 763 0004 00000000 		.word	0
 764 0008 00000000 		.word	0
 765 000c 00000000 		.word	0
 766 0010 00000000 		.word	0
 767 0014 0000F03F 		.word	1072693248
 768              		.text
 769              	.Letext0:
 770              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 771              		.file 5 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 772              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 773              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 774              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 775              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 776              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 777              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 778              		.file 12 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/types.h"
 779              		.file 13 "Drivers/quaternion_lib/Inc/quaternion_lib.h"
 780              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 781              		.file 15 "Drivers/Giro/Inc/giro_driver.h"
 782              		.file 16 "Drivers/Squeaker/Inc/squeaker.h"
 783              		.file 17 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/math.h"
 784              		.file 18 "Drivers/Servo/Inc/servo.h"
 785              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 786              		.file 20 "<built-in>"
ARM GAS  /tmp/ccvLDpwd.s 			page 101


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_it.c
     /tmp/ccvLDpwd.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccvLDpwd.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccvLDpwd.s:42     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccvLDpwd.s:48     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccvLDpwd.s:65     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccvLDpwd.s:71     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccvLDpwd.s:85     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccvLDpwd.s:91     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccvLDpwd.s:111    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccvLDpwd.s:117    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccvLDpwd.s:591    .text.SysTick_Handler:0000000000000264 $d
     /tmp/ccvLDpwd.s:611    .text.EXTI2_3_IRQHandler:0000000000000000 $t
     /tmp/ccvLDpwd.s:617    .text.EXTI2_3_IRQHandler:0000000000000000 EXTI2_3_IRQHandler
     /tmp/ccvLDpwd.s:651    .text.EXTI2_3_IRQHandler:0000000000000018 $d
     /tmp/ccvLDpwd.s:656    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccvLDpwd.s:662    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccvLDpwd.s:717    .text.USART1_IRQHandler:0000000000000018 $d
     /tmp/ccvLDpwd.s:754    .data.mode:0000000000000000 mode
     /tmp/ccvLDpwd.s:761    .data.oz:0000000000000000 oz
     /tmp/ccvLDpwd.s:731    .data.app:0000000000000000 app
     /tmp/ccvLDpwd.s:743    .data.front:0000000000000000 front
     /tmp/ccvLDpwd.s:727    .data.app:0000000000000000 $d
     /tmp/ccvLDpwd.s:739    .data.front:0000000000000000 $d
     /tmp/ccvLDpwd.s:757    .data.oz:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_dmul
__aeabi_ddiv
__aeabi_dadd
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dcmpgt
off_squeaker
HAL_IncTick
giro_read_angls
squeaker_set_frik
memcpy
Rotate
atan
asin
Vector_Vector_Mul
Vector_Scalar_Mul
sqrt
set_3_servo
button_status
button_delay_counter
htim1
hi2c1
htim2
HAL_GPIO_EXTI_IRQHandler
HAL_UART_IRQHandler
huart1
